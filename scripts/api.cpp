void vkapi::accountBanUser (std::string user_id) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);};; request("account.banUser", requestParameters); };
void vkapi::accountGetActiveOffers (std::string offset, std::string count) { std::string requestParameters; if ((offset != NULL)&&(offset != "")) {requestParameters = ("offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("account.getActiveOffers", requestParameters); };
void vkapi::accountChangePassword (std::string restore_sid, std::string change_password_hash, std::string old_password, std::string new_password) { std::string requestParameters; if ((restore_sid != NULL)&&(restore_sid != "")) {requestParameters = ("restore_sid=" + restore_sid);}; if ((change_password_hash != NULL)&&(change_password_hash != "")) {requestParameters += ("&change_password_hash=" + change_password_hash);}; if ((old_password != NULL)&&(old_password != "")) {requestParameters += ("&old_password=" + old_password);}; if ((new_password != NULL)&&(new_password != "")) {requestParameters += ("&new_password=" + new_password);};; request("account.changePassword", requestParameters); };
void vkapi::accountGetAppPermissions (std::string user_id) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);};; request("account.getAppPermissions", requestParameters); };
void vkapi::accountGetBanned (std::string offset, std::string count) { std::string requestParameters; if ((offset != NULL)&&(offset != "")) {requestParameters = ("offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("account.getBanned", requestParameters); };
void vkapi::accountGetCounters (std::string filter) { std::string requestParameters; if ((filter != NULL)&&(filter != "")) {requestParameters = ("filter=" + filter);};; request("account.getCounters", requestParameters); };
void vkapi::accountGetInfo (std::string fields) { std::string requestParameters; if ((fields != NULL)&&(fields != "")) {requestParameters = ("fields=" + fields);};; request("account.getInfo", requestParameters); };
void vkapi::accountGetProfileInfo () { request("account.getProfileInfo"); };
void vkapi::accountLookupContacts (std::string contacts, std::string service, std::string mycontact, std::string return_all, std::string fields) { std::string requestParameters; if ((contacts != NULL)&&(contacts != "")) {requestParameters = ("contacts=" + contacts);}; if ((service != NULL)&&(service != "")) {requestParameters += ("&service=" + service);}; if ((mycontact != NULL)&&(mycontact != "")) {requestParameters += ("&mycontact=" + mycontact);}; if ((return_all != NULL)&&(return_all != "")) {requestParameters += ("&return_all=" + return_all);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);};; request("account.lookupContacts", requestParameters); };
void vkapi::accountGetPushSettings (std::string device_id, std::string token) { std::string requestParameters; if ((device_id != NULL)&&(device_id != "")) {requestParameters = ("device_id=" + device_id);}; if ((token != NULL)&&(token != "")) {requestParameters += ("&token=" + token);};; request("account.getPushSettings", requestParameters); };
void vkapi::accountSaveProfileInfo (std::string first_name, std::string last_name, std::string maiden_name, std::string screen_name, std::string cancel_request_id, std::string sex, std::string relation, std::string relation_partner_id, std::string bdate, std::string bdate_visibility, std::string home_town, std::string country_id, std::string city_id, std::string status) { std::string requestParameters; if ((first_name != NULL)&&(first_name != "")) {requestParameters = ("first_name=" + first_name);}; if ((last_name != NULL)&&(last_name != "")) {requestParameters += ("&last_name=" + last_name);}; if ((maiden_name != NULL)&&(maiden_name != "")) {requestParameters += ("&maiden_name=" + maiden_name);}; if ((screen_name != NULL)&&(screen_name != "")) {requestParameters += ("&screen_name=" + screen_name);}; if ((cancel_request_id != NULL)&&(cancel_request_id != "")) {requestParameters += ("&cancel_request_id=" + cancel_request_id);}; if ((sex != NULL)&&(sex != "")) {requestParameters += ("&sex=" + sex);}; if ((relation != NULL)&&(relation != "")) {requestParameters += ("&relation=" + relation);}; if ((relation_partner_id != NULL)&&(relation_partner_id != "")) {requestParameters += ("&relation_partner_id=" + relation_partner_id);}; if ((bdate != NULL)&&(bdate != "")) {requestParameters += ("&bdate=" + bdate);}; if ((bdate_visibility != NULL)&&(bdate_visibility != "")) {requestParameters += ("&bdate_visibility=" + bdate_visibility);}; if ((home_town != NULL)&&(home_town != "")) {requestParameters += ("&home_town=" + home_town);}; if ((country_id != NULL)&&(country_id != "")) {requestParameters += ("&country_id=" + country_id);}; if ((city_id != NULL)&&(city_id != "")) {requestParameters += ("&city_id=" + city_id);}; if ((status != NULL)&&(status != "")) {requestParameters += ("&status=" + status);};; request("account.saveProfileInfo", requestParameters); };
void vkapi::accountSetInfo (std::string intro, std::string own_posts_default, std::string no_wall_replies) { std::string requestParameters; if ((intro != NULL)&&(intro != "")) {requestParameters = ("intro=" + intro);}; if ((own_posts_default != NULL)&&(own_posts_default != "")) {requestParameters += ("&own_posts_default=" + own_posts_default);}; if ((no_wall_replies != NULL)&&(no_wall_replies != "")) {requestParameters += ("&no_wall_replies=" + no_wall_replies);};; request("account.setInfo", requestParameters); };
void vkapi::accountRegisterDevice (std::string token, std::string device_model, std::string device_year, std::string device_id, std::string system_version, std::string settings, std::string sandbox, std::string no_text, std::string subscribe) { std::string requestParameters; if ((token != NULL)&&(token != "")) {requestParameters = ("token=" + token);}; if ((device_model != NULL)&&(device_model != "")) {requestParameters += ("&device_model=" + device_model);}; if ((device_year != NULL)&&(device_year != "")) {requestParameters += ("&device_year=" + device_year);}; if ((device_id != NULL)&&(device_id != "")) {requestParameters += ("&device_id=" + device_id);}; if ((system_version != NULL)&&(system_version != "")) {requestParameters += ("&system_version=" + system_version);}; if ((settings != NULL)&&(settings != "")) {requestParameters += ("&settings=" + settings);}; if ((sandbox != NULL)&&(sandbox != "")) {requestParameters += ("&sandbox=" + sandbox);}; if ((no_text != NULL)&&(no_text != "")) {requestParameters += ("&no_text=" + no_text);}; if ((subscribe != NULL)&&(subscribe != "")) {requestParameters += ("&subscribe=" + subscribe);};; request("account.registerDevice", requestParameters); };
void vkapi::accountSetNameInMenu (std::string user_id, std::string name) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((name != NULL)&&(name != "")) {requestParameters += ("&name=" + name);};; request("account.setNameInMenu", requestParameters); };
void vkapi::accountSetOffline () { request("account.setOffline"); };
void vkapi::accountSetOnline (std::string voip) { std::string requestParameters; if ((voip != NULL)&&(voip != "")) {requestParameters = ("voip=" + voip);};; request("account.setOnline", requestParameters); };
void vkapi::accountSetPushSettings (std::string device_id, std::string settings, std::string key, std::string value) { std::string requestParameters; if ((device_id != NULL)&&(device_id != "")) {requestParameters = ("device_id=" + device_id);}; if ((settings != NULL)&&(settings != "")) {requestParameters += ("&settings=" + settings);}; if ((key != NULL)&&(key != "")) {requestParameters += ("&key=" + key);}; if ((value != NULL)&&(value != "")) {requestParameters += ("&value=" + value);};; request("account.setPushSettings", requestParameters); };
void vkapi::accountSetSilenceMode (std::string device_id, std::string time, std::string chat_id, std::string user_id, std::string sound, std::string token) { std::string requestParameters; if ((device_id != NULL)&&(device_id != "")) {requestParameters = ("device_id=" + device_id);}; if ((time != NULL)&&(time != "")) {requestParameters += ("&time=" + time);}; if ((chat_id != NULL)&&(chat_id != "")) {requestParameters += ("&chat_id=" + chat_id);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);}; if ((sound != NULL)&&(sound != "")) {requestParameters += ("&sound=" + sound);}; if ((token != NULL)&&(token != "")) {requestParameters += ("&token=" + token);};; request("account.setSilenceMode", requestParameters); };
void vkapi::accountUnbanUser (std::string user_id) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);};; request("account.unbanUser", requestParameters); };
void vkapi::accountUnregisterDevice (std::string device_id, std::string sandbox, std::string token) { std::string requestParameters; if ((device_id != NULL)&&(device_id != "")) {requestParameters = ("device_id=" + device_id);}; if ((sandbox != NULL)&&(sandbox != "")) {requestParameters += ("&sandbox=" + sandbox);}; if ((token != NULL)&&(token != "")) {requestParameters += ("&token=" + token);};; request("account.unregisterDevice", requestParameters); };
void vkapi::appsGet (std::string app_id, std::string app_ids, std::string platform, std::string extended, std::string return_friends, std::string fields, std::string name_case) { std::string requestParameters; if ((app_id != NULL)&&(app_id != "")) {requestParameters = ("app_id=" + app_id);}; if ((app_ids != NULL)&&(app_ids != "")) {requestParameters += ("&app_ids=" + app_ids);}; if ((platform != NULL)&&(platform != "")) {requestParameters += ("&platform=" + platform);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((return_friends != NULL)&&(return_friends != "")) {requestParameters += ("&return_friends=" + return_friends);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((name_case != NULL)&&(name_case != "")) {requestParameters += ("&name_case=" + name_case);};; request("apps.get", requestParameters); };
void vkapi::appsDeleteAppRequests () { request("apps.deleteAppRequests"); };
void vkapi::appsGetLeaderboard (std::string type, std::string global, std::string extended) { std::string requestParameters; if ((type != NULL)&&(type != "")) {requestParameters = ("type=" + type);}; if ((global != NULL)&&(global != "")) {requestParameters += ("&global=" + global);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);};; request("apps.getLeaderboard", requestParameters); };
void vkapi::appsGetFriendsList (std::string extended, std::string count, std::string offset, std::string type, std::string fields) { std::string requestParameters; if ((extended != NULL)&&(extended != "")) {requestParameters = ("extended=" + extended);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((type != NULL)&&(type != "")) {requestParameters += ("&type=" + type);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);};; request("apps.getFriendsList", requestParameters); };
void vkapi::appsGetCatalog (std::string sort, std::string offset, std::string count, std::string platform, std::string extended, std::string return_friends, std::string fields, std::string name_case, std::string q, std::string genre_id, std::string filter) { std::string requestParameters; if ((sort != NULL)&&(sort != "")) {requestParameters = ("sort=" + sort);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((platform != NULL)&&(platform != "")) {requestParameters += ("&platform=" + platform);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((return_friends != NULL)&&(return_friends != "")) {requestParameters += ("&return_friends=" + return_friends);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((name_case != NULL)&&(name_case != "")) {requestParameters += ("&name_case=" + name_case);}; if ((q != NULL)&&(q != "")) {requestParameters += ("&q=" + q);}; if ((genre_id != NULL)&&(genre_id != "")) {requestParameters += ("&genre_id=" + genre_id);}; if ((filter != NULL)&&(filter != "")) {requestParameters += ("&filter=" + filter);};; request("apps.getCatalog", requestParameters); };
void vkapi::appsGetScore (std::string user_id) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);};; request("apps.getScore", requestParameters); };
void vkapi::appsSendRequest (std::string user_id, std::string text, std::string type, std::string name, std::string key, std::string separate) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((text != NULL)&&(text != "")) {requestParameters += ("&text=" + text);}; if ((type != NULL)&&(type != "")) {requestParameters += ("&type=" + type);}; if ((name != NULL)&&(name != "")) {requestParameters += ("&name=" + name);}; if ((key != NULL)&&(key != "")) {requestParameters += ("&key=" + key);}; if ((separate != NULL)&&(separate != "")) {requestParameters += ("&separate=" + separate);};; request("apps.sendRequest", requestParameters); };
void vkapi::audioAddAlbum (std::string group_id, std::string title) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);};; request("audio.addAlbum", requestParameters); };
void vkapi::audioAdd (std::string audio_id, std::string owner_id, std::string group_id, std::string album_id) { std::string requestParameters; if ((audio_id != NULL)&&(audio_id != "")) {requestParameters = ("audio_id=" + audio_id);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);};; request("audio.add", requestParameters); };
void vkapi::audioDelete (std::string audio_id, std::string owner_id) { std::string requestParameters; if ((audio_id != NULL)&&(audio_id != "")) {requestParameters = ("audio_id=" + audio_id);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);};; request("audio.delete", requestParameters); };
void vkapi::audioDeleteAlbum (std::string group_id, std::string album_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);};; request("audio.deleteAlbum", requestParameters); };
void vkapi::audioEditAlbum (std::string group_id, std::string album_id, std::string title) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);};; request("audio.editAlbum", requestParameters); };
void vkapi::audioGet (std::string owner_id, std::string album_id, std::string audio_ids, std::string need_user, std::string offset, std::string count) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);}; if ((audio_ids != NULL)&&(audio_ids != "")) {requestParameters += ("&audio_ids=" + audio_ids);}; if ((need_user != NULL)&&(need_user != "")) {requestParameters += ("&need_user=" + need_user);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("audio.get", requestParameters); };
void vkapi::audioGetBroadcastList (std::string filter, std::string active) { std::string requestParameters; if ((filter != NULL)&&(filter != "")) {requestParameters = ("filter=" + filter);}; if ((active != NULL)&&(active != "")) {requestParameters += ("&active=" + active);};; request("audio.getBroadcastList", requestParameters); };
void vkapi::audioGetAlbums (std::string owner_id, std::string offset, std::string count) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("audio.getAlbums", requestParameters); };
void vkapi::audioEdit (std::string owner_id, std::string audio_id, std::string artist, std::string title, std::string text, std::string genre_id, std::string no_search) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((audio_id != NULL)&&(audio_id != "")) {requestParameters += ("&audio_id=" + audio_id);}; if ((artist != NULL)&&(artist != "")) {requestParameters += ("&artist=" + artist);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);}; if ((text != NULL)&&(text != "")) {requestParameters += ("&text=" + text);}; if ((genre_id != NULL)&&(genre_id != "")) {requestParameters += ("&genre_id=" + genre_id);}; if ((no_search != NULL)&&(no_search != "")) {requestParameters += ("&no_search=" + no_search);};; request("audio.edit", requestParameters); };
void vkapi::audioGetLyrics (std::string lyrics_id) { std::string requestParameters; if ((lyrics_id != NULL)&&(lyrics_id != "")) {requestParameters = ("lyrics_id=" + lyrics_id);};; request("audio.getLyrics", requestParameters); };
void vkapi::audioGetById (std::string audios) { std::string requestParameters; if ((audios != NULL)&&(audios != "")) {requestParameters = ("audios=" + audios);};; request("audio.getById", requestParameters); };
void vkapi::audioGetCount (std::string owner_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);};; request("audio.getCount", requestParameters); };
void vkapi::audioGetPopular (std::string only_eng, std::string genre_id, std::string offset, std::string count) { std::string requestParameters; if ((only_eng != NULL)&&(only_eng != "")) {requestParameters = ("only_eng=" + only_eng);}; if ((genre_id != NULL)&&(genre_id != "")) {requestParameters += ("&genre_id=" + genre_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("audio.getPopular", requestParameters); };
void vkapi::audioGetRecommendations (std::string target_audio, std::string user_id, std::string offset, std::string count, std::string shuffle) { std::string requestParameters; if ((target_audio != NULL)&&(target_audio != "")) {requestParameters = ("target_audio=" + target_audio);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((shuffle != NULL)&&(shuffle != "")) {requestParameters += ("&shuffle=" + shuffle);};; request("audio.getRecommendations", requestParameters); };
void vkapi::audioGetUploadServer () { request("audio.getUploadServer"); };
void vkapi::audioMoveToAlbum (std::string group_id, std::string album_id, std::string audio_ids) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);}; if ((audio_ids != NULL)&&(audio_ids != "")) {requestParameters += ("&audio_ids=" + audio_ids);};; request("audio.moveToAlbum", requestParameters); };
void vkapi::audioReorder (std::string audio_id, std::string owner_id, std::string before, std::string after) { std::string requestParameters; if ((audio_id != NULL)&&(audio_id != "")) {requestParameters = ("audio_id=" + audio_id);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((before != NULL)&&(before != "")) {requestParameters += ("&before=" + before);}; if ((after != NULL)&&(after != "")) {requestParameters += ("&after=" + after);};; request("audio.reorder", requestParameters); };
void vkapi::audioRestore (std::string audio_id, std::string owner_id) { std::string requestParameters; if ((audio_id != NULL)&&(audio_id != "")) {requestParameters = ("audio_id=" + audio_id);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);};; request("audio.restore", requestParameters); };
void vkapi::audioSearch (std::string q, std::string auto_complete, std::string lyrics, std::string performer_only, std::string sort, std::string search_own, std::string offset, std::string count) { std::string requestParameters; if ((q != NULL)&&(q != "")) {requestParameters = ("q=" + q);}; if ((auto_complete != NULL)&&(auto_complete != "")) {requestParameters += ("&auto_complete=" + auto_complete);}; if ((lyrics != NULL)&&(lyrics != "")) {requestParameters += ("&lyrics=" + lyrics);}; if ((performer_only != NULL)&&(performer_only != "")) {requestParameters += ("&performer_only=" + performer_only);}; if ((sort != NULL)&&(sort != "")) {requestParameters += ("&sort=" + sort);}; if ((search_own != NULL)&&(search_own != "")) {requestParameters += ("&search_own=" + search_own);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("audio.search", requestParameters); };
void vkapi::authCheckPhone (std::string phone, std::string client_id, std::string client_secret) { std::string requestParameters; if ((phone != NULL)&&(phone != "")) {requestParameters = ("phone=" + phone);}; if ((client_id != NULL)&&(client_id != "")) {requestParameters += ("&client_id=" + client_id);}; if ((client_secret != NULL)&&(client_secret != "")) {requestParameters += ("&client_secret=" + client_secret);};; request("auth.checkPhone", requestParameters); };
void vkapi::audioSave (std::string server, std::string audio, std::string hash, std::string artist, std::string title) { std::string requestParameters; if ((server != NULL)&&(server != "")) {requestParameters = ("server=" + server);}; if ((audio != NULL)&&(audio != "")) {requestParameters += ("&audio=" + audio);}; if ((hash != NULL)&&(hash != "")) {requestParameters += ("&hash=" + hash);}; if ((artist != NULL)&&(artist != "")) {requestParameters += ("&artist=" + artist);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);};; request("audio.save", requestParameters); };
void vkapi::authRestore (std::string phone) { std::string requestParameters; if ((phone != NULL)&&(phone != "")) {requestParameters = ("phone=" + phone);};; request("auth.restore", requestParameters); };
void vkapi::boardCloseTopic (std::string group_id, std::string topic_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((topic_id != NULL)&&(topic_id != "")) {requestParameters += ("&topic_id=" + topic_id);};; request("board.closeTopic", requestParameters); };
void vkapi::boardDeleteComment (std::string group_id, std::string topic_id, std::string comment_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((topic_id != NULL)&&(topic_id != "")) {requestParameters += ("&topic_id=" + topic_id);}; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters += ("&comment_id=" + comment_id);};; request("board.deleteComment", requestParameters); };
void vkapi::boardEditTopic (std::string group_id, std::string topic_id, std::string title) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((topic_id != NULL)&&(topic_id != "")) {requestParameters += ("&topic_id=" + topic_id);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);};; request("board.editTopic", requestParameters); };
void vkapi::boardFixTopic (std::string group_id, std::string topic_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((topic_id != NULL)&&(topic_id != "")) {requestParameters += ("&topic_id=" + topic_id);};; request("board.fixTopic", requestParameters); };
void vkapi::boardGetComments (std::string group_id, std::string topic_id, std::string need_likes, std::string start_comment_id, std::string offset, std::string count, std::string extended, std::string sort) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((topic_id != NULL)&&(topic_id != "")) {requestParameters += ("&topic_id=" + topic_id);}; if ((need_likes != NULL)&&(need_likes != "")) {requestParameters += ("&need_likes=" + need_likes);}; if ((start_comment_id != NULL)&&(start_comment_id != "")) {requestParameters += ("&start_comment_id=" + start_comment_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((sort != NULL)&&(sort != "")) {requestParameters += ("&sort=" + sort);};; request("board.getComments", requestParameters); };
void vkapi::boardEditComment (std::string group_id, std::string topic_id, std::string comment_id, std::string text, std::string attachments) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((topic_id != NULL)&&(topic_id != "")) {requestParameters += ("&topic_id=" + topic_id);}; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters += ("&comment_id=" + comment_id);}; if ((text != NULL)&&(text != "")) {requestParameters += ("&text=" + text);}; if ((attachments != NULL)&&(attachments != "")) {requestParameters += ("&attachments=" + attachments);};; request("board.editComment", requestParameters); };
void vkapi::authConfirm (std::string client_id, std::string client_secret, std::string phone, std::string code, std::string password, std::string test_mode, std::string intro) { std::string requestParameters; if ((client_id != NULL)&&(client_id != "")) {requestParameters = ("client_id=" + client_id);}; if ((client_secret != NULL)&&(client_secret != "")) {requestParameters += ("&client_secret=" + client_secret);}; if ((phone != NULL)&&(phone != "")) {requestParameters += ("&phone=" + phone);}; if ((code != NULL)&&(code != "")) {requestParameters += ("&code=" + code);}; if ((password != NULL)&&(password != "")) {requestParameters += ("&password=" + password);}; if ((test_mode != NULL)&&(test_mode != "")) {requestParameters += ("&test_mode=" + test_mode);}; if ((intro != NULL)&&(intro != "")) {requestParameters += ("&intro=" + intro);};; request("auth.confirm", requestParameters); };
void vkapi::boardGetTopics (std::string group_id, std::string topic_ids, std::string order, std::string offset, std::string count, std::string extended, std::string preview, std::string preview_length) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((topic_ids != NULL)&&(topic_ids != "")) {requestParameters += ("&topic_ids=" + topic_ids);}; if ((order != NULL)&&(order != "")) {requestParameters += ("&order=" + order);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((preview != NULL)&&(preview != "")) {requestParameters += ("&preview=" + preview);}; if ((preview_length != NULL)&&(preview_length != "")) {requestParameters += ("&preview_length=" + preview_length);};; request("board.getTopics", requestParameters); };
void vkapi::boardAddComment (std::string group_id, std::string topic_id, std::string text, std::string attachments, std::string from_group, std::string sticker_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((topic_id != NULL)&&(topic_id != "")) {requestParameters += ("&topic_id=" + topic_id);}; if ((text != NULL)&&(text != "")) {requestParameters += ("&text=" + text);}; if ((attachments != NULL)&&(attachments != "")) {requestParameters += ("&attachments=" + attachments);}; if ((from_group != NULL)&&(from_group != "")) {requestParameters += ("&from_group=" + from_group);}; if ((sticker_id != NULL)&&(sticker_id != "")) {requestParameters += ("&sticker_id=" + sticker_id);};; request("board.addComment", requestParameters); };
void vkapi::authSignup (std::string first_name, std::string last_name, std::string client_id, std::string client_secret, std::string phone, std::string password, std::string test_mode, std::string voice, std::string sex, std::string sid) { std::string requestParameters; if ((first_name != NULL)&&(first_name != "")) {requestParameters = ("first_name=" + first_name);}; if ((last_name != NULL)&&(last_name != "")) {requestParameters += ("&last_name=" + last_name);}; if ((client_id != NULL)&&(client_id != "")) {requestParameters += ("&client_id=" + client_id);}; if ((client_secret != NULL)&&(client_secret != "")) {requestParameters += ("&client_secret=" + client_secret);}; if ((phone != NULL)&&(phone != "")) {requestParameters += ("&phone=" + phone);}; if ((password != NULL)&&(password != "")) {requestParameters += ("&password=" + password);}; if ((test_mode != NULL)&&(test_mode != "")) {requestParameters += ("&test_mode=" + test_mode);}; if ((voice != NULL)&&(voice != "")) {requestParameters += ("&voice=" + voice);}; if ((sex != NULL)&&(sex != "")) {requestParameters += ("&sex=" + sex);}; if ((sid != NULL)&&(sid != "")) {requestParameters += ("&sid=" + sid);};; request("auth.signup", requestParameters); };
void vkapi::audioSetBroadcast (std::string audio, std::string target_ids) { std::string requestParameters; if ((audio != NULL)&&(audio != "")) {requestParameters = ("audio=" + audio);}; if ((target_ids != NULL)&&(target_ids != "")) {requestParameters += ("&target_ids=" + target_ids);};; request("audio.setBroadcast", requestParameters); };
void vkapi::boardDeleteTopic (std::string group_id, std::string topic_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((topic_id != NULL)&&(topic_id != "")) {requestParameters += ("&topic_id=" + topic_id);};; request("board.deleteTopic", requestParameters); };
void vkapi::boardRestoreComment (std::string group_id, std::string topic_id, std::string comment_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((topic_id != NULL)&&(topic_id != "")) {requestParameters += ("&topic_id=" + topic_id);}; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters += ("&comment_id=" + comment_id);};; request("board.restoreComment", requestParameters); };
void vkapi::boardAddTopic (std::string group_id, std::string title, std::string text, std::string from_group, std::string attachments) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);}; if ((text != NULL)&&(text != "")) {requestParameters += ("&text=" + text);}; if ((from_group != NULL)&&(from_group != "")) {requestParameters += ("&from_group=" + from_group);}; if ((attachments != NULL)&&(attachments != "")) {requestParameters += ("&attachments=" + attachments);};; request("board.addTopic", requestParameters); };
void vkapi::boardUnfixTopic (std::string group_id, std::string topic_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((topic_id != NULL)&&(topic_id != "")) {requestParameters += ("&topic_id=" + topic_id);};; request("board.unfixTopic", requestParameters); };
void vkapi::boardOpenTopic (std::string group_id, std::string topic_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((topic_id != NULL)&&(topic_id != "")) {requestParameters += ("&topic_id=" + topic_id);};; request("board.openTopic", requestParameters); };
void vkapi::databaseGetCountries (std::string need_all, std::string code, std::string offset, std::string count) { std::string requestParameters; if ((need_all != NULL)&&(need_all != "")) {requestParameters = ("need_all=" + need_all);}; if ((code != NULL)&&(code != "")) {requestParameters += ("&code=" + code);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("database.getCountries", requestParameters); };
void vkapi::databaseGetCountriesById (std::string country_ids) { std::string requestParameters; if ((country_ids != NULL)&&(country_ids != "")) {requestParameters = ("country_ids=" + country_ids);};; request("database.getCountriesById", requestParameters); };
void vkapi::databaseGetCities (std::string country_id, std::string region_id, std::string q, std::string need_all, std::string offset, std::string count) { std::string requestParameters; if ((country_id != NULL)&&(country_id != "")) {requestParameters = ("country_id=" + country_id);}; if ((region_id != NULL)&&(region_id != "")) {requestParameters += ("&region_id=" + region_id);}; if ((q != NULL)&&(q != "")) {requestParameters += ("&q=" + q);}; if ((need_all != NULL)&&(need_all != "")) {requestParameters += ("&need_all=" + need_all);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("database.getCities", requestParameters); };
void vkapi::databaseGetChairs (std::string faculty_id, std::string offset, std::string count) { std::string requestParameters; if ((faculty_id != NULL)&&(faculty_id != "")) {requestParameters = ("faculty_id=" + faculty_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("database.getChairs", requestParameters); };
void vkapi::databaseGetCitiesById (std::string city_ids) { std::string requestParameters; if ((city_ids != NULL)&&(city_ids != "")) {requestParameters = ("city_ids=" + city_ids);};; request("database.getCitiesById", requestParameters); };
void vkapi::databaseGetRegions (std::string country_id, std::string q, std::string offset, std::string count) { std::string requestParameters; if ((country_id != NULL)&&(country_id != "")) {requestParameters = ("country_id=" + country_id);}; if ((q != NULL)&&(q != "")) {requestParameters += ("&q=" + q);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("database.getRegions", requestParameters); };
void vkapi::databaseGetFaculties (std::string university_id, std::string offset, std::string count) { std::string requestParameters; if ((university_id != NULL)&&(university_id != "")) {requestParameters = ("university_id=" + university_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("database.getFaculties", requestParameters); };
void vkapi::databaseGetSchoolClasses (std::string country_id) { std::string requestParameters; if ((country_id != NULL)&&(country_id != "")) {requestParameters = ("country_id=" + country_id);};; request("database.getSchoolClasses", requestParameters); };
void vkapi::databaseGetUniversities (std::string q, std::string country_id, std::string city_id, std::string offset, std::string count) { std::string requestParameters; if ((q != NULL)&&(q != "")) {requestParameters = ("q=" + q);}; if ((country_id != NULL)&&(country_id != "")) {requestParameters += ("&country_id=" + country_id);}; if ((city_id != NULL)&&(city_id != "")) {requestParameters += ("&city_id=" + city_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("database.getUniversities", requestParameters); };
void vkapi::databaseGetSchools (std::string q, std::string city_id, std::string offset, std::string count) { std::string requestParameters; if ((q != NULL)&&(q != "")) {requestParameters = ("q=" + q);}; if ((city_id != NULL)&&(city_id != "")) {requestParameters += ("&city_id=" + city_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("database.getSchools", requestParameters); };
void vkapi::docsAdd (std::string owner_id, std::string doc_id, std::string access_key) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((doc_id != NULL)&&(doc_id != "")) {requestParameters += ("&doc_id=" + doc_id);}; if ((access_key != NULL)&&(access_key != "")) {requestParameters += ("&access_key=" + access_key);};; request("docs.add", requestParameters); };
void vkapi::docsDelete (std::string owner_id, std::string doc_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((doc_id != NULL)&&(doc_id != "")) {requestParameters += ("&doc_id=" + doc_id);};; request("docs.delete", requestParameters); };
void vkapi::docsGetById (std::string docs) { std::string requestParameters; if ((docs != NULL)&&(docs != "")) {requestParameters = ("docs=" + docs);};; request("docs.getById", requestParameters); };
void vkapi::databaseGetStreetsById (std::string street_ids) { std::string requestParameters; if ((street_ids != NULL)&&(street_ids != "")) {requestParameters = ("street_ids=" + street_ids);};; request("database.getStreetsById", requestParameters); };
void vkapi::docsGet (std::string count, std::string offset, std::string owner_id) { std::string requestParameters; if ((count != NULL)&&(count != "")) {requestParameters = ("count=" + count);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);};; request("docs.get", requestParameters); };
void vkapi::docsGetUploadServer (std::string group_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);};; request("docs.getUploadServer", requestParameters); };
void vkapi::docsGetWallUploadServer (std::string group_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);};; request("docs.getWallUploadServer", requestParameters); };
void vkapi::execute (std::string code) { std::string requestParameters; if ((code != NULL)&&(code != "")) {requestParameters = ("code=" + code);};; request("execute", requestParameters); };
void vkapi::docsSave (std::string file, std::string title, std::string tags) { std::string requestParameters; if ((file != NULL)&&(file != "")) {requestParameters = ("file=" + file);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);}; if ((tags != NULL)&&(tags != "")) {requestParameters += ("&tags=" + tags);};; request("docs.save", requestParameters); };
void vkapi::faveAddGroup (std::string group_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);};; request("fave.addGroup", requestParameters); };
void vkapi::faveAddLink (std::string link, std::string text) { std::string requestParameters; if ((link != NULL)&&(link != "")) {requestParameters = ("link=" + link);}; if ((text != NULL)&&(text != "")) {requestParameters += ("&text=" + text);};; request("fave.addLink", requestParameters); };
void vkapi::faveGetLinks (std::string offset, std::string count) { std::string requestParameters; if ((offset != NULL)&&(offset != "")) {requestParameters = ("offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("fave.getLinks", requestParameters); };
void vkapi::faveGetPhotos (std::string offset, std::string count, std::string photo_sizes) { std::string requestParameters; if ((offset != NULL)&&(offset != "")) {requestParameters = ("offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((photo_sizes != NULL)&&(photo_sizes != "")) {requestParameters += ("&photo_sizes=" + photo_sizes);};; request("fave.getPhotos", requestParameters); };
void vkapi::faveGetPosts (std::string offset, std::string count, std::string extended) { std::string requestParameters; if ((offset != NULL)&&(offset != "")) {requestParameters = ("offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);};; request("fave.getPosts", requestParameters); };
void vkapi::faveAddUser (std::string user_id) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);};; request("fave.addUser", requestParameters); };
void vkapi::faveGetUsers (std::string offset, std::string count) { std::string requestParameters; if ((offset != NULL)&&(offset != "")) {requestParameters = ("offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("fave.getUsers", requestParameters); };
void vkapi::faveGetVideos (std::string offset, std::string count, std::string extended) { std::string requestParameters; if ((offset != NULL)&&(offset != "")) {requestParameters = ("offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);};; request("fave.getVideos", requestParameters); };
void vkapi::faveRemoveLink (std::string link_id) { std::string requestParameters; if ((link_id != NULL)&&(link_id != "")) {requestParameters = ("link_id=" + link_id);};; request("fave.removeLink", requestParameters); };
void vkapi::friendsAddList (std::string name, std::string user_ids) { std::string requestParameters; if ((name != NULL)&&(name != "")) {requestParameters = ("name=" + name);}; if ((user_ids != NULL)&&(user_ids != "")) {requestParameters += ("&user_ids=" + user_ids);};; request("friends.addList", requestParameters); };
void vkapi::faveRemoveGroup (std::string group_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);};; request("fave.removeGroup", requestParameters); };
void vkapi::friendsAreFriends (std::string user_ids, std::string need_sign) { std::string requestParameters; if ((user_ids != NULL)&&(user_ids != "")) {requestParameters = ("user_ids=" + user_ids);}; if ((need_sign != NULL)&&(need_sign != "")) {requestParameters += ("&need_sign=" + need_sign);};; request("friends.areFriends", requestParameters); };
void vkapi::friendsAdd (std::string user_id, std::string text, std::string follow) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((text != NULL)&&(text != "")) {requestParameters += ("&text=" + text);}; if ((follow != NULL)&&(follow != "")) {requestParameters += ("&follow=" + follow);};; request("friends.add", requestParameters); };
void vkapi::friendsDeleteAllRequests () { request("friends.deleteAllRequests"); };
void vkapi::friendsDelete (std::string user_id) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);};; request("friends.delete", requestParameters); };
void vkapi::friendsDeleteList (std::string list_id) { std::string requestParameters; if ((list_id != NULL)&&(list_id != "")) {requestParameters = ("list_id=" + list_id);};; request("friends.deleteList", requestParameters); };
void vkapi::friendsGet (std::string user_id, std::string order, std::string list_id, std::string count, std::string offset, std::string fields, std::string name_case) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((order != NULL)&&(order != "")) {requestParameters += ("&order=" + order);}; if ((list_id != NULL)&&(list_id != "")) {requestParameters += ("&list_id=" + list_id);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((name_case != NULL)&&(name_case != "")) {requestParameters += ("&name_case=" + name_case);};; request("friends.get", requestParameters); };
void vkapi::friendsEdit (std::string user_id, std::string list_ids) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((list_ids != NULL)&&(list_ids != "")) {requestParameters += ("&list_ids=" + list_ids);};; request("friends.edit", requestParameters); };
void vkapi::friendsEditList (std::string name, std::string list_id, std::string user_ids, std::string add_user_ids, std::string delete_user_ids) { std::string requestParameters; if ((name != NULL)&&(name != "")) {requestParameters = ("name=" + name);}; if ((list_id != NULL)&&(list_id != "")) {requestParameters += ("&list_id=" + list_id);}; if ((user_ids != NULL)&&(user_ids != "")) {requestParameters += ("&user_ids=" + user_ids);}; if ((add_user_ids != NULL)&&(add_user_ids != "")) {requestParameters += ("&add_user_ids=" + add_user_ids);}; if ((delete_user_ids != NULL)&&(delete_user_ids != "")) {requestParameters += ("&delete_user_ids=" + delete_user_ids);};; request("friends.editList", requestParameters); };
void vkapi::friendsGetAppUsers () { request("friends.getAppUsers"); };
void vkapi::friendsGetByPhones (std::string phones, std::string fields) { std::string requestParameters; if ((phones != NULL)&&(phones != "")) {requestParameters = ("phones=" + phones);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);};; request("friends.getByPhones", requestParameters); };
void vkapi::friendsGetLists (std::string user_id, std::string return_system) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((return_system != NULL)&&(return_system != "")) {requestParameters += ("&return_system=" + return_system);};; request("friends.getLists", requestParameters); };
void vkapi::friendsGetAvailableForCall (std::string fields, std::string name_case) { std::string requestParameters; if ((fields != NULL)&&(fields != "")) {requestParameters = ("fields=" + fields);}; if ((name_case != NULL)&&(name_case != "")) {requestParameters += ("&name_case=" + name_case);};; request("friends.getAvailableForCall", requestParameters); };
void vkapi::friendsGetMutual (std::string source_uid, std::string target_uid, std::string target_uids, std::string order, std::string count, std::string offset) { std::string requestParameters; if ((source_uid != NULL)&&(source_uid != "")) {requestParameters = ("source_uid=" + source_uid);}; if ((target_uid != NULL)&&(target_uid != "")) {requestParameters += ("&target_uid=" + target_uid);}; if ((target_uids != NULL)&&(target_uids != "")) {requestParameters += ("&target_uids=" + target_uids);}; if ((order != NULL)&&(order != "")) {requestParameters += ("&order=" + order);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);};; request("friends.getMutual", requestParameters); };
void vkapi::friendsGetOnline (std::string user_id, std::string list_id, std::string online_mobile, std::string order, std::string count, std::string offset) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((list_id != NULL)&&(list_id != "")) {requestParameters += ("&list_id=" + list_id);}; if ((online_mobile != NULL)&&(online_mobile != "")) {requestParameters += ("&online_mobile=" + online_mobile);}; if ((order != NULL)&&(order != "")) {requestParameters += ("&order=" + order);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);};; request("friends.getOnline", requestParameters); };
void vkapi::friendsGetRecent (std::string count) { std::string requestParameters; if ((count != NULL)&&(count != "")) {requestParameters = ("count=" + count);};; request("friends.getRecent", requestParameters); };
void vkapi::friendsGetSuggestions (std::string filter, std::string count, std::string offset, std::string fields, std::string name_case) { std::string requestParameters; if ((filter != NULL)&&(filter != "")) {requestParameters = ("filter=" + filter);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((name_case != NULL)&&(name_case != "")) {requestParameters += ("&name_case=" + name_case);};; request("friends.getSuggestions", requestParameters); };
void vkapi::friendsGetRequests (std::string offset, std::string count, std::string extended, std::string need_mutual, std::string out, std::string sort, std::string suggested) { std::string requestParameters; if ((offset != NULL)&&(offset != "")) {requestParameters = ("offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((need_mutual != NULL)&&(need_mutual != "")) {requestParameters += ("&need_mutual=" + need_mutual);}; if ((out != NULL)&&(out != "")) {requestParameters += ("&out=" + out);}; if ((sort != NULL)&&(sort != "")) {requestParameters += ("&sort=" + sort);}; if ((suggested != NULL)&&(suggested != "")) {requestParameters += ("&suggested=" + suggested);};; request("friends.getRequests", requestParameters); };
void vkapi::friendsSearch (std::string user_id, std::string q, std::string fields, std::string name_case, std::string offset, std::string count) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((q != NULL)&&(q != "")) {requestParameters += ("&q=" + q);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((name_case != NULL)&&(name_case != "")) {requestParameters += ("&name_case=" + name_case);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("friends.search", requestParameters); };
void vkapi::giftsGet (std::string user_id, std::string count, std::string offset) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);};; request("gifts.get", requestParameters); };
void vkapi::groupsAddLink (std::string group_id, std::string link, std::string text) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((link != NULL)&&(link != "")) {requestParameters += ("&link=" + link);}; if ((text != NULL)&&(text != "")) {requestParameters += ("&text=" + text);};; request("groups.addLink", requestParameters); };
void vkapi::groupsApproveRequest (std::string group_id, std::string user_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);};; request("groups.approveRequest", requestParameters); };
void vkapi::groupsBanUser (std::string group_id, std::string user_id, std::string end_date, std::string reason, std::string comment, std::string comment_visible) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);}; if ((end_date != NULL)&&(end_date != "")) {requestParameters += ("&end_date=" + end_date);}; if ((reason != NULL)&&(reason != "")) {requestParameters += ("&reason=" + reason);}; if ((comment != NULL)&&(comment != "")) {requestParameters += ("&comment=" + comment);}; if ((comment_visible != NULL)&&(comment_visible != "")) {requestParameters += ("&comment_visible=" + comment_visible);};; request("groups.banUser", requestParameters); };
void vkapi::groupsCreate (std::string title, std::string description, std::string type, std::string subtype) { std::string requestParameters; if ((title != NULL)&&(title != "")) {requestParameters = ("title=" + title);}; if ((description != NULL)&&(description != "")) {requestParameters += ("&description=" + description);}; if ((type != NULL)&&(type != "")) {requestParameters += ("&type=" + type);}; if ((subtype != NULL)&&(subtype != "")) {requestParameters += ("&subtype=" + subtype);};; request("groups.create", requestParameters); };
void vkapi::groupsEdit (std::string group_id, std::string title, std::string description, std::string screen_name, std::string access, std::string website, std::string subject, std::string email, std::string phone, std::string rss, std::string event_start_date, std::string event_finish_date, std::string event_group_id, std::string public_category, std::string public_subcategory, std::string public_date, std::string wall, std::string topics, std::string photos, std::string video, std::string audio, std::string links, std::string events, std::string places, std::string contacts, std::string docs, std::string wiki) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);}; if ((description != NULL)&&(description != "")) {requestParameters += ("&description=" + description);}; if ((screen_name != NULL)&&(screen_name != "")) {requestParameters += ("&screen_name=" + screen_name);}; if ((access != NULL)&&(access != "")) {requestParameters += ("&access=" + access);}; if ((website != NULL)&&(website != "")) {requestParameters += ("&website=" + website);}; if ((subject != NULL)&&(subject != "")) {requestParameters += ("&subject=" + subject);}; if ((email != NULL)&&(email != "")) {requestParameters += ("&email=" + email);}; if ((phone != NULL)&&(phone != "")) {requestParameters += ("&phone=" + phone);}; if ((rss != NULL)&&(rss != "")) {requestParameters += ("&rss=" + rss);}; if ((event_start_date != NULL)&&(event_start_date != "")) {requestParameters += ("&event_start_date=" + event_start_date);}; if ((event_finish_date != NULL)&&(event_finish_date != "")) {requestParameters += ("&event_finish_date=" + event_finish_date);}; if ((event_group_id != NULL)&&(event_group_id != "")) {requestParameters += ("&event_group_id=" + event_group_id);}; if ((public_category != NULL)&&(public_category != "")) {requestParameters += ("&public_category=" + public_category);}; if ((public_subcategory != NULL)&&(public_subcategory != "")) {requestParameters += ("&public_subcategory=" + public_subcategory);}; if ((public_date != NULL)&&(public_date != "")) {requestParameters += ("&public_date=" + public_date);}; if ((wall != NULL)&&(wall != "")) {requestParameters += ("&wall=" + wall);}; if ((topics != NULL)&&(topics != "")) {requestParameters += ("&topics=" + topics);}; if ((photos != NULL)&&(photos != "")) {requestParameters += ("&photos=" + photos);}; if ((video != NULL)&&(video != "")) {requestParameters += ("&video=" + video);}; if ((audio != NULL)&&(audio != "")) {requestParameters += ("&audio=" + audio);}; if ((links != NULL)&&(links != "")) {requestParameters += ("&links=" + links);}; if ((events != NULL)&&(events != "")) {requestParameters += ("&events=" + events);}; if ((places != NULL)&&(places != "")) {requestParameters += ("&places=" + places);}; if ((contacts != NULL)&&(contacts != "")) {requestParameters += ("&contacts=" + contacts);}; if ((docs != NULL)&&(docs != "")) {requestParameters += ("&docs=" + docs);}; if ((wiki != NULL)&&(wiki != "")) {requestParameters += ("&wiki=" + wiki);};; request("groups.edit", requestParameters); };
void vkapi::groupsDeleteLink (std::string group_id, std::string link_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((link_id != NULL)&&(link_id != "")) {requestParameters += ("&link_id=" + link_id);};; request("groups.deleteLink", requestParameters); };
void vkapi::groupsEditLink (std::string group_id, std::string link_id, std::string text) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((link_id != NULL)&&(link_id != "")) {requestParameters += ("&link_id=" + link_id);}; if ((text != NULL)&&(text != "")) {requestParameters += ("&text=" + text);};; request("groups.editLink", requestParameters); };
void vkapi::groupsEditManager (std::string group_id, std::string user_id, std::string role, std::string is_contact, std::string contact_position, std::string contact_phone, std::string contact_email) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);}; if ((role != NULL)&&(role != "")) {requestParameters += ("&role=" + role);}; if ((is_contact != NULL)&&(is_contact != "")) {requestParameters += ("&is_contact=" + is_contact);}; if ((contact_position != NULL)&&(contact_position != "")) {requestParameters += ("&contact_position=" + contact_position);}; if ((contact_phone != NULL)&&(contact_phone != "")) {requestParameters += ("&contact_phone=" + contact_phone);}; if ((contact_email != NULL)&&(contact_email != "")) {requestParameters += ("&contact_email=" + contact_email);};; request("groups.editManager", requestParameters); };
void vkapi::groupsEditPlace (std::string group_id, std::string title, std::string address, std::string country_id, std::string city_id, std::string latitude, std::string long_itude) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);}; if ((address != NULL)&&(address != "")) {requestParameters += ("&address=" + address);}; if ((country_id != NULL)&&(country_id != "")) {requestParameters += ("&country_id=" + country_id);}; if ((city_id != NULL)&&(city_id != "")) {requestParameters += ("&city_id=" + city_id);}; if ((latitude != NULL)&&(latitude != "")) {requestParameters += ("&latitude=" + latitude);}; if ((long_itude != NULL)&&(long_itude != "")) {requestParameters += ("&longitude=" + long_itude);};; request("groups.editPlace", requestParameters); };
void vkapi::groupsGetBanned (std::string group_id, std::string offset, std::string count, std::string fields, std::string user_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);};; request("groups.getBanned", requestParameters); };
void vkapi::groupsGet (std::string user_id, std::string extended, std::string filter, std::string fields, std::string offset, std::string count) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((filter != NULL)&&(filter != "")) {requestParameters += ("&filter=" + filter);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("groups.get", requestParameters); };
void vkapi::groupsGetInvites (std::string offset, std::string count, std::string extended) { std::string requestParameters; if ((offset != NULL)&&(offset != "")) {requestParameters = ("offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);};; request("groups.getInvites", requestParameters); };
void vkapi::groupsGetInvitedUsers (std::string group_id, std::string offset, std::string count, std::string fields, std::string name_case) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((name_case != NULL)&&(name_case != "")) {requestParameters += ("&name_case=" + name_case);};; request("groups.getInvitedUsers", requestParameters); };
void vkapi::groupsGetById (std::string group_ids, std::string group_id, std::string fields) { std::string requestParameters; if ((group_ids != NULL)&&(group_ids != "")) {requestParameters = ("group_ids=" + group_ids);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);};; request("groups.getById", requestParameters); };
void vkapi::groupsGetMembers (std::string group_id, std::string sort, std::string offset, std::string count, std::string fields, std::string filter) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((sort != NULL)&&(sort != "")) {requestParameters += ("&sort=" + sort);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((filter != NULL)&&(filter != "")) {requestParameters += ("&filter=" + filter);};; request("groups.getMembers", requestParameters); };
void vkapi::groupsGetRequests (std::string group_id, std::string offset, std::string count, std::string fields) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);};; request("groups.getRequests", requestParameters); };
void vkapi::groupsGetSettings (std::string group_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);};; request("groups.getSettings", requestParameters); };
void vkapi::groupsInvite (std::string group_id, std::string user_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);};; request("groups.invite", requestParameters); };
void vkapi::groupsIsMember (std::string group_id, std::string user_id, std::string user_ids, std::string extended) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);}; if ((user_ids != NULL)&&(user_ids != "")) {requestParameters += ("&user_ids=" + user_ids);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);};; request("groups.isMember", requestParameters); };
void vkapi::groupsJoin (std::string group_id, std::string not_sure) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((not_sure != NULL)&&(not_sure != "")) {requestParameters += ("&not_sure=" + not_sure);};; request("groups.join", requestParameters); };
void vkapi::groupsLeave (std::string group_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);};; request("groups.leave", requestParameters); };
void vkapi::groupsRemoveUser (std::string group_id, std::string user_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);};; request("groups.removeUser", requestParameters); };
void vkapi::groupsReorderLink (std::string group_id, std::string link_id, std::string after) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((link_id != NULL)&&(link_id != "")) {requestParameters += ("&link_id=" + link_id);}; if ((after != NULL)&&(after != "")) {requestParameters += ("&after=" + after);};; request("groups.reorderLink", requestParameters); };
void vkapi::groupsSearch (std::string q, std::string type, std::string country_id, std::string city_id, std::string future, std::string sort, std::string offset, std::string count) { std::string requestParameters; if ((q != NULL)&&(q != "")) {requestParameters = ("q=" + q);}; if ((type != NULL)&&(type != "")) {requestParameters += ("&type=" + type);}; if ((country_id != NULL)&&(country_id != "")) {requestParameters += ("&country_id=" + country_id);}; if ((city_id != NULL)&&(city_id != "")) {requestParameters += ("&city_id=" + city_id);}; if ((future != NULL)&&(future != "")) {requestParameters += ("&future=" + future);}; if ((sort != NULL)&&(sort != "")) {requestParameters += ("&sort=" + sort);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("groups.search", requestParameters); };
void vkapi::groupsUnbanUser (std::string group_id, std::string user_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);};; request("groups.unbanUser", requestParameters); };
void vkapi::likesAdd (std::string type, std::string owner_id, std::string item_id, std::string access_key, std::string ref) { std::string requestParameters; if ((type != NULL)&&(type != "")) {requestParameters = ("type=" + type);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((item_id != NULL)&&(item_id != "")) {requestParameters += ("&item_id=" + item_id);}; if ((access_key != NULL)&&(access_key != "")) {requestParameters += ("&access_key=" + access_key);}; if ((ref != NULL)&&(ref != "")) {requestParameters += ("&ref=" + ref);};; request("likes.add", requestParameters); };
void vkapi::likesDelete (std::string type, std::string owner_id, std::string item_id) { std::string requestParameters; if ((type != NULL)&&(type != "")) {requestParameters = ("type=" + type);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((item_id != NULL)&&(item_id != "")) {requestParameters += ("&item_id=" + item_id);};; request("likes.delete", requestParameters); };
void vkapi::messagesCreateChat (std::string user_ids, std::string title) { std::string requestParameters; if ((user_ids != NULL)&&(user_ids != "")) {requestParameters = ("user_ids=" + user_ids);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);};; request("messages.createChat", requestParameters); };
void vkapi::messagesAddChatUser (std::string chat_id, std::string user_id) { std::string requestParameters; if ((chat_id != NULL)&&(chat_id != "")) {requestParameters = ("chat_id=" + chat_id);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);};; request("messages.addChatUser", requestParameters); };
void vkapi::likesGetList (std::string type, std::string owner_id, std::string item_id, std::string page_url, std::string filter, std::string friends_only, std::string extended, std::string offset, std::string count, std::string skip_own) { std::string requestParameters; if ((type != NULL)&&(type != "")) {requestParameters = ("type=" + type);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((item_id != NULL)&&(item_id != "")) {requestParameters += ("&item_id=" + item_id);}; if ((page_url != NULL)&&(page_url != "")) {requestParameters += ("&page_url=" + page_url);}; if ((filter != NULL)&&(filter != "")) {requestParameters += ("&filter=" + filter);}; if ((friends_only != NULL)&&(friends_only != "")) {requestParameters += ("&friends_only=" + friends_only);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((skip_own != NULL)&&(skip_own != "")) {requestParameters += ("&skip_own=" + skip_own);};; request("likes.getList", requestParameters); };
void vkapi::likesIsLiked (std::string user_id, std::string type, std::string owner_id, std::string item_id) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((type != NULL)&&(type != "")) {requestParameters += ("&type=" + type);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((item_id != NULL)&&(item_id != "")) {requestParameters += ("&item_id=" + item_id);};; request("likes.isLiked", requestParameters); };
void vkapi::messagesDeleteChatPhoto (std::string chat_id) { std::string requestParameters; if ((chat_id != NULL)&&(chat_id != "")) {requestParameters = ("chat_id=" + chat_id);};; request("messages.deleteChatPhoto", requestParameters); };
void vkapi::messagesDelete (std::string message_ids) { std::string requestParameters; if ((message_ids != NULL)&&(message_ids != "")) {requestParameters = ("message_ids=" + message_ids);};; request("messages.delete", requestParameters); };
void vkapi::messagesDeleteDialog (std::string user_id, std::string peer_id, std::string offset, std::string count) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((peer_id != NULL)&&(peer_id != "")) {requestParameters += ("&peer_id=" + peer_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("messages.deleteDialog", requestParameters); };
void vkapi::messagesEditChat (std::string chat_id, std::string title) { std::string requestParameters; if ((chat_id != NULL)&&(chat_id != "")) {requestParameters = ("chat_id=" + chat_id);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);};; request("messages.editChat", requestParameters); };
void vkapi::messagesGet (std::string out, std::string offset, std::string count, std::string time_offset, std::string filters, std::string preview_length, std::string last_message_id) { std::string requestParameters; if ((out != NULL)&&(out != "")) {requestParameters = ("out=" + out);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((time_offset != NULL)&&(time_offset != "")) {requestParameters += ("&time_offset=" + time_offset);}; if ((filters != NULL)&&(filters != "")) {requestParameters += ("&filters=" + filters);}; if ((preview_length != NULL)&&(preview_length != "")) {requestParameters += ("&preview_length=" + preview_length);}; if ((last_message_id != NULL)&&(last_message_id != "")) {requestParameters += ("&last_message_id=" + last_message_id);};; request("messages.get", requestParameters); };
void vkapi::messagesGetById (std::string message_ids, std::string preview_length) { std::string requestParameters; if ((message_ids != NULL)&&(message_ids != "")) {requestParameters = ("message_ids=" + message_ids);}; if ((preview_length != NULL)&&(preview_length != "")) {requestParameters += ("&preview_length=" + preview_length);};; request("messages.getById", requestParameters); };
void vkapi::messagesGetChat (std::string chat_id, std::string chat_ids, std::string fields, std::string name_case) { std::string requestParameters; if ((chat_id != NULL)&&(chat_id != "")) {requestParameters = ("chat_id=" + chat_id);}; if ((chat_ids != NULL)&&(chat_ids != "")) {requestParameters += ("&chat_ids=" + chat_ids);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((name_case != NULL)&&(name_case != "")) {requestParameters += ("&name_case=" + name_case);};; request("messages.getChat", requestParameters); };
void vkapi::messagesGetChatUsers (std::string chat_id, std::string chat_ids, std::string fields, std::string name_case) { std::string requestParameters; if ((chat_id != NULL)&&(chat_id != "")) {requestParameters = ("chat_id=" + chat_id);}; if ((chat_ids != NULL)&&(chat_ids != "")) {requestParameters += ("&chat_ids=" + chat_ids);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((name_case != NULL)&&(name_case != "")) {requestParameters += ("&name_case=" + name_case);};; request("messages.getChatUsers", requestParameters); };
void vkapi::messagesGetDialogs (std::string offset, std::string count, std::string start_message_id, std::string preview_length, std::string unread, std::string user_id) { std::string requestParameters; if ((offset != NULL)&&(offset != "")) {requestParameters = ("offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((start_message_id != NULL)&&(start_message_id != "")) {requestParameters += ("&start_message_id=" + start_message_id);}; if ((preview_length != NULL)&&(preview_length != "")) {requestParameters += ("&preview_length=" + preview_length);}; if ((unread != NULL)&&(unread != "")) {requestParameters += ("&unread=" + unread);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);};; request("messages.getDialogs", requestParameters); };
void vkapi::messagesGetHistory (std::string offset, std::string count, std::string user_id, std::string chat_id, std::string peer_id, std::string start_message_id, std::string rev) { std::string requestParameters; if ((offset != NULL)&&(offset != "")) {requestParameters = ("offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);}; if ((chat_id != NULL)&&(chat_id != "")) {requestParameters += ("&chat_id=" + chat_id);}; if ((peer_id != NULL)&&(peer_id != "")) {requestParameters += ("&peer_id=" + peer_id);}; if ((start_message_id != NULL)&&(start_message_id != "")) {requestParameters += ("&start_message_id=" + start_message_id);}; if ((rev != NULL)&&(rev != "")) {requestParameters += ("&rev=" + rev);};; request("messages.getHistory", requestParameters); };
void vkapi::messagesGetLastActivity (std::string user_id) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);};; request("messages.getLastActivity", requestParameters); };
void vkapi::messagesGetLongPollHistory (std::string ts, std::string pts, std::string preview_length, std::string onlines, std::string fields, std::string events_limit, std::string msgs_limit, std::string max_msg_id) { std::string requestParameters; if ((ts != NULL)&&(ts != "")) {requestParameters = ("ts=" + ts);}; if ((pts != NULL)&&(pts != "")) {requestParameters += ("&pts=" + pts);}; if ((preview_length != NULL)&&(preview_length != "")) {requestParameters += ("&preview_length=" + preview_length);}; if ((onlines != NULL)&&(onlines != "")) {requestParameters += ("&onlines=" + onlines);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((events_limit != NULL)&&(events_limit != "")) {requestParameters += ("&events_limit=" + events_limit);}; if ((msgs_limit != NULL)&&(msgs_limit != "")) {requestParameters += ("&msgs_limit=" + msgs_limit);}; if ((max_msg_id != NULL)&&(max_msg_id != "")) {requestParameters += ("&max_msg_id=" + max_msg_id);};; request("messages.getLongPollHistory", requestParameters); };
void vkapi::messagesGetLongPollServer (std::string use_ssl, std::string need_pts) { std::string requestParameters; if ((use_ssl != NULL)&&(use_ssl != "")) {requestParameters = ("use_ssl=" + use_ssl);}; if ((need_pts != NULL)&&(need_pts != "")) {requestParameters += ("&need_pts=" + need_pts);};; request("messages.getLongPollServer", requestParameters); };
void vkapi::messagesMarkAsImportant (std::string message_ids, std::string important) { std::string requestParameters; if ((message_ids != NULL)&&(message_ids != "")) {requestParameters = ("message_ids=" + message_ids);}; if ((important != NULL)&&(important != "")) {requestParameters += ("&important=" + important);};; request("messages.markAsImportant", requestParameters); };
void vkapi::messagesMarkAsRead (std::string message_ids, std::string peer_id, std::string start_message_id) { std::string requestParameters; if ((message_ids != NULL)&&(message_ids != "")) {requestParameters = ("message_ids=" + message_ids);}; if ((peer_id != NULL)&&(peer_id != "")) {requestParameters += ("&peer_id=" + peer_id);}; if ((start_message_id != NULL)&&(start_message_id != "")) {requestParameters += ("&start_message_id=" + start_message_id);};; request("messages.markAsRead", requestParameters); };
void vkapi::messagesRemoveChatUser (std::string chat_id, std::string user_id) { std::string requestParameters; if ((chat_id != NULL)&&(chat_id != "")) {requestParameters = ("chat_id=" + chat_id);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);};; request("messages.removeChatUser", requestParameters); };
void vkapi::messagesRestore (std::string message_id) { std::string requestParameters; if ((message_id != NULL)&&(message_id != "")) {requestParameters = ("message_id=" + message_id);};; request("messages.restore", requestParameters); };
void vkapi::messagesSearch (std::string q, std::string preview_length, std::string offset, std::string count) { std::string requestParameters; if ((q != NULL)&&(q != "")) {requestParameters = ("q=" + q);}; if ((preview_length != NULL)&&(preview_length != "")) {requestParameters += ("&preview_length=" + preview_length);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("messages.search", requestParameters); };
void vkapi::messagesSetActivity (std::string user_id, std::string type, std::string peer_id) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((type != NULL)&&(type != "")) {requestParameters += ("&type=" + type);}; if ((peer_id != NULL)&&(peer_id != "")) {requestParameters += ("&peer_id=" + peer_id);};; request("messages.setActivity", requestParameters); };
void vkapi::newsfeedDeleteBan (std::string user_ids, std::string group_ids) { std::string requestParameters; if ((user_ids != NULL)&&(user_ids != "")) {requestParameters = ("user_ids=" + user_ids);}; if ((group_ids != NULL)&&(group_ids != "")) {requestParameters += ("&group_ids=" + group_ids);};; request("newsfeed.deleteBan", requestParameters); };
void vkapi::messagesSend (std::string user_id, std::string peer_id, std::string domain, std::string chat_id, std::string user_ids, std::string message, std::string guid, std::string lat, std::string long_, std::string attachment, std::string forward_messages, std::string sticker_id) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((peer_id != NULL)&&(peer_id != "")) {requestParameters += ("&peer_id=" + peer_id);}; if ((domain != NULL)&&(domain != "")) {requestParameters += ("&domain=" + domain);}; if ((chat_id != NULL)&&(chat_id != "")) {requestParameters += ("&chat_id=" + chat_id);}; if ((user_ids != NULL)&&(user_ids != "")) {requestParameters += ("&user_ids=" + user_ids);}; if ((message != NULL)&&(message != "")) {requestParameters += ("&message=" + message);}; if ((guid != NULL)&&(guid != "")) {requestParameters += ("&guid=" + guid);}; if ((lat != NULL)&&(lat != "")) {requestParameters += ("&lat=" + lat);}; if ((long_ != NULL)&&(long_ != "")) {requestParameters += ("&long=" + long_);}; if ((attachment != NULL)&&(attachment != "")) {requestParameters += ("&attachment=" + attachment);}; if ((forward_messages != NULL)&&(forward_messages != "")) {requestParameters += ("&forward_messages=" + forward_messages);}; if ((sticker_id != NULL)&&(sticker_id != "")) {requestParameters += ("&sticker_id=" + sticker_id);};; request("messages.send", requestParameters); };
void vkapi::messagesSetChatPhoto (std::string file) { std::string requestParameters; if ((file != NULL)&&(file != "")) {requestParameters = ("file=" + file);};; request("messages.setChatPhoto", requestParameters); };
void vkapi::messagesSearchDialogs (std::string q, std::string limit, std::string fields) { std::string requestParameters; if ((q != NULL)&&(q != "")) {requestParameters = ("q=" + q);}; if ((limit != NULL)&&(limit != "")) {requestParameters += ("&limit=" + limit);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);};; request("messages.searchDialogs", requestParameters); };
void vkapi::newsfeedDeleteList (std::string list_id) { std::string requestParameters; if ((list_id != NULL)&&(list_id != "")) {requestParameters = ("list_id=" + list_id);};; request("newsfeed.deleteList", requestParameters); };
void vkapi::newsfeedGet (std::string filters, std::string return_banned, std::string start_time, std::string end_time, std::string max_photos, std::string source_ids, std::string start_from, std::string count, std::string fields, std::string from, std::string offset) { std::string requestParameters; if ((filters != NULL)&&(filters != "")) {requestParameters = ("filters=" + filters);}; if ((return_banned != NULL)&&(return_banned != "")) {requestParameters += ("&return_banned=" + return_banned);}; if ((start_time != NULL)&&(start_time != "")) {requestParameters += ("&start_time=" + start_time);}; if ((end_time != NULL)&&(end_time != "")) {requestParameters += ("&end_time=" + end_time);}; if ((max_photos != NULL)&&(max_photos != "")) {requestParameters += ("&max_photos=" + max_photos);}; if ((source_ids != NULL)&&(source_ids != "")) {requestParameters += ("&source_ids=" + source_ids);}; if ((start_from != NULL)&&(start_from != "")) {requestParameters += ("&start_from=" + start_from);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((from != NULL)&&(from != "")) {requestParameters += ("&from=" + from);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);};; request("newsfeed.get", requestParameters); };
void vkapi::newsfeedGetBanned (std::string extended, std::string fields, std::string name_case) { std::string requestParameters; if ((extended != NULL)&&(extended != "")) {requestParameters = ("extended=" + extended);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((name_case != NULL)&&(name_case != "")) {requestParameters += ("&name_case=" + name_case);};; request("newsfeed.getBanned", requestParameters); };
void vkapi::newsfeedGetComments (std::string count, std::string filters, std::string reposts, std::string start_time, std::string end_time, std::string last_comments_count, std::string start_from, std::string fields, std::string from, std::string last_comments) { std::string requestParameters; if ((count != NULL)&&(count != "")) {requestParameters = ("count=" + count);}; if ((filters != NULL)&&(filters != "")) {requestParameters += ("&filters=" + filters);}; if ((reposts != NULL)&&(reposts != "")) {requestParameters += ("&reposts=" + reposts);}; if ((start_time != NULL)&&(start_time != "")) {requestParameters += ("&start_time=" + start_time);}; if ((end_time != NULL)&&(end_time != "")) {requestParameters += ("&end_time=" + end_time);}; if ((last_comments_count != NULL)&&(last_comments_count != "")) {requestParameters += ("&last_comments_count=" + last_comments_count);}; if ((start_from != NULL)&&(start_from != "")) {requestParameters += ("&start_from=" + start_from);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((from != NULL)&&(from != "")) {requestParameters += ("&from=" + from);}; if ((last_comments != NULL)&&(last_comments != "")) {requestParameters += ("&last_comments=" + last_comments);};; request("newsfeed.getComments", requestParameters); };
void vkapi::newsfeedGetLists (std::string list_ids, std::string extended) { std::string requestParameters; if ((list_ids != NULL)&&(list_ids != "")) {requestParameters = ("list_ids=" + list_ids);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);};; request("newsfeed.getLists", requestParameters); };
void vkapi::newsfeedGetMentions (std::string owner_id, std::string start_time, std::string end_time, std::string offset, std::string count) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((start_time != NULL)&&(start_time != "")) {requestParameters += ("&start_time=" + start_time);}; if ((end_time != NULL)&&(end_time != "")) {requestParameters += ("&end_time=" + end_time);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("newsfeed.getMentions", requestParameters); };
void vkapi::newsfeedIgnoreItem (std::string type, std::string owner_id, std::string item_id) { std::string requestParameters; if ((type != NULL)&&(type != "")) {requestParameters = ("type=" + type);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((item_id != NULL)&&(item_id != "")) {requestParameters += ("&item_id=" + item_id);};; request("newsfeed.ignoreItem", requestParameters); };
void vkapi::newsfeedGetSuggestedSources (std::string offset, std::string count, std::string shuffle, std::string fields) { std::string requestParameters; if ((offset != NULL)&&(offset != "")) {requestParameters = ("offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((shuffle != NULL)&&(shuffle != "")) {requestParameters += ("&shuffle=" + shuffle);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);};; request("newsfeed.getSuggestedSources", requestParameters); };
void vkapi::newsfeedGetRecommended (std::string start_time, std::string end_time, std::string max_photos, std::string start_from, std::string count, std::string fields, std::string from, std::string offset) { std::string requestParameters; if ((start_time != NULL)&&(start_time != "")) {requestParameters = ("start_time=" + start_time);}; if ((end_time != NULL)&&(end_time != "")) {requestParameters += ("&end_time=" + end_time);}; if ((max_photos != NULL)&&(max_photos != "")) {requestParameters += ("&max_photos=" + max_photos);}; if ((start_from != NULL)&&(start_from != "")) {requestParameters += ("&start_from=" + start_from);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((from != NULL)&&(from != "")) {requestParameters += ("&from=" + from);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);};; request("newsfeed.getRecommended", requestParameters); };
void vkapi::newsfeedSaveList (std::string list_id, std::string title, std::string source_ids, std::string no_reposts) { std::string requestParameters; if ((list_id != NULL)&&(list_id != "")) {requestParameters = ("list_id=" + list_id);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);}; if ((source_ids != NULL)&&(source_ids != "")) {requestParameters += ("&source_ids=" + source_ids);}; if ((no_reposts != NULL)&&(no_reposts != "")) {requestParameters += ("&no_reposts=" + no_reposts);};; request("newsfeed.saveList", requestParameters); };
void vkapi::newsfeedSearch (std::string q, std::string extended, std::string count, std::string latitude, std::string long_itude, std::string start_time, std::string end_time, std::string start_from, std::string fields, std::string start_id, std::string offset) { std::string requestParameters; if ((q != NULL)&&(q != "")) {requestParameters = ("q=" + q);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((latitude != NULL)&&(latitude != "")) {requestParameters += ("&latitude=" + latitude);}; if ((long_itude != NULL)&&(long_itude != "")) {requestParameters += ("&longitude=" + long_itude);}; if ((start_time != NULL)&&(start_time != "")) {requestParameters += ("&start_time=" + start_time);}; if ((end_time != NULL)&&(end_time != "")) {requestParameters += ("&end_time=" + end_time);}; if ((start_from != NULL)&&(start_from != "")) {requestParameters += ("&start_from=" + start_from);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((start_id != NULL)&&(start_id != "")) {requestParameters += ("&start_id=" + start_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);};; request("newsfeed.search", requestParameters); };
void vkapi::newsfeedUnignoreItem (std::string type, std::string owner_id, std::string item_id) { std::string requestParameters; if ((type != NULL)&&(type != "")) {requestParameters = ("type=" + type);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((item_id != NULL)&&(item_id != "")) {requestParameters += ("&item_id=" + item_id);};; request("newsfeed.unignoreItem", requestParameters); };
void vkapi::newsfeedUnsubscribe (std::string type, std::string owner_id, std::string item_id) { std::string requestParameters; if ((type != NULL)&&(type != "")) {requestParameters = ("type=" + type);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((item_id != NULL)&&(item_id != "")) {requestParameters += ("&item_id=" + item_id);};; request("newsfeed.unsubscribe", requestParameters); };
void vkapi::notesAdd (std::string title, std::string text, std::string privacy_view, std::string privacy_comment, std::string privacy, std::string comment_privacy) { std::string requestParameters; if ((title != NULL)&&(title != "")) {requestParameters = ("title=" + title);}; if ((text != NULL)&&(text != "")) {requestParameters += ("&text=" + text);}; if ((privacy_view != NULL)&&(privacy_view != "")) {requestParameters += ("&privacy_view=" + privacy_view);}; if ((privacy_comment != NULL)&&(privacy_comment != "")) {requestParameters += ("&privacy_comment=" + privacy_comment);}; if ((privacy != NULL)&&(privacy != "")) {requestParameters += ("&privacy=" + privacy);}; if ((comment_privacy != NULL)&&(comment_privacy != "")) {requestParameters += ("&comment_privacy=" + comment_privacy);};; request("notes.add", requestParameters); };
void vkapi::notesCreateComment (std::string note_id, std::string owner_id, std::string reply_to, std::string message) { std::string requestParameters; if ((note_id != NULL)&&(note_id != "")) {requestParameters = ("note_id=" + note_id);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((reply_to != NULL)&&(reply_to != "")) {requestParameters += ("&reply_to=" + reply_to);}; if ((message != NULL)&&(message != "")) {requestParameters += ("&message=" + message);};; request("notes.createComment", requestParameters); };
void vkapi::notesDelete (std::string note_id) { std::string requestParameters; if ((note_id != NULL)&&(note_id != "")) {requestParameters = ("note_id=" + note_id);};; request("notes.delete", requestParameters); };
void vkapi::notesEdit (std::string note_id, std::string title, std::string text, std::string privacy_view, std::string privacy_comment, std::string privacy, std::string comment_privacy) { std::string requestParameters; if ((note_id != NULL)&&(note_id != "")) {requestParameters = ("note_id=" + note_id);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);}; if ((text != NULL)&&(text != "")) {requestParameters += ("&text=" + text);}; if ((privacy_view != NULL)&&(privacy_view != "")) {requestParameters += ("&privacy_view=" + privacy_view);}; if ((privacy_comment != NULL)&&(privacy_comment != "")) {requestParameters += ("&privacy_comment=" + privacy_comment);}; if ((privacy != NULL)&&(privacy != "")) {requestParameters += ("&privacy=" + privacy);}; if ((comment_privacy != NULL)&&(comment_privacy != "")) {requestParameters += ("&comment_privacy=" + comment_privacy);};; request("notes.edit", requestParameters); };
void vkapi::notesDeleteComment (std::string comment_id, std::string owner_id) { std::string requestParameters; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters = ("comment_id=" + comment_id);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);};; request("notes.deleteComment", requestParameters); };
void vkapi::notesEditComment (std::string comment_id, std::string owner_id, std::string message) { std::string requestParameters; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters = ("comment_id=" + comment_id);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((message != NULL)&&(message != "")) {requestParameters += ("&message=" + message);};; request("notes.editComment", requestParameters); };
void vkapi::notesGet (std::string note_ids, std::string user_id, std::string offset, std::string count, std::string sort) { std::string requestParameters; if ((note_ids != NULL)&&(note_ids != "")) {requestParameters = ("note_ids=" + note_ids);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((sort != NULL)&&(sort != "")) {requestParameters += ("&sort=" + sort);};; request("notes.get", requestParameters); };
void vkapi::notesGetById (std::string note_id, std::string owner_id, std::string need_wiki) { std::string requestParameters; if ((note_id != NULL)&&(note_id != "")) {requestParameters = ("note_id=" + note_id);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((need_wiki != NULL)&&(need_wiki != "")) {requestParameters += ("&need_wiki=" + need_wiki);};; request("notes.getById", requestParameters); };
void vkapi::notesGetComments (std::string note_id, std::string owner_id, std::string sort, std::string offset, std::string count) { std::string requestParameters; if ((note_id != NULL)&&(note_id != "")) {requestParameters = ("note_id=" + note_id);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((sort != NULL)&&(sort != "")) {requestParameters += ("&sort=" + sort);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("notes.getComments", requestParameters); };
void vkapi::notesRestoreComment (std::string comment_id, std::string owner_id) { std::string requestParameters; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters = ("comment_id=" + comment_id);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);};; request("notes.restoreComment", requestParameters); };
void vkapi::notesGetFriendsNotes (std::string offset, std::string count) { std::string requestParameters; if ((offset != NULL)&&(offset != "")) {requestParameters = ("offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("notes.getFriendsNotes", requestParameters); };
void vkapi::notificationsGet (std::string count, std::string start_from, std::string filters, std::string start_time, std::string end_time, std::string from, std::string offset) { std::string requestParameters; if ((count != NULL)&&(count != "")) {requestParameters = ("count=" + count);}; if ((start_from != NULL)&&(start_from != "")) {requestParameters += ("&start_from=" + start_from);}; if ((filters != NULL)&&(filters != "")) {requestParameters += ("&filters=" + filters);}; if ((start_time != NULL)&&(start_time != "")) {requestParameters += ("&start_time=" + start_time);}; if ((end_time != NULL)&&(end_time != "")) {requestParameters += ("&end_time=" + end_time);}; if ((from != NULL)&&(from != "")) {requestParameters += ("&from=" + from);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);};; request("notifications.get", requestParameters); };
void vkapi::notificationsMarkAsViewed () { request("notifications.markAsViewed"); };
void vkapi::pagesGet (std::string owner_id, std::string page_id, std::string global, std::string site_preview, std::string title, std::string need_source, std::string need_html) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((page_id != NULL)&&(page_id != "")) {requestParameters += ("&page_id=" + page_id);}; if ((global != NULL)&&(global != "")) {requestParameters += ("&global=" + global);}; if ((site_preview != NULL)&&(site_preview != "")) {requestParameters += ("&site_preview=" + site_preview);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);}; if ((need_source != NULL)&&(need_source != "")) {requestParameters += ("&need_source=" + need_source);}; if ((need_html != NULL)&&(need_html != "")) {requestParameters += ("&need_html=" + need_html);};; request("pages.get", requestParameters); };
void vkapi::pagesClearCache (std::string url) { std::string requestParameters; if ((url != NULL)&&(url != "")) {requestParameters = ("url=" + url);};; request("pages.clearCache", requestParameters); };
void vkapi::pagesGetHistory (std::string page_id, std::string group_id, std::string user_id) { std::string requestParameters; if ((page_id != NULL)&&(page_id != "")) {requestParameters = ("page_id=" + page_id);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);};; request("pages.getHistory", requestParameters); };
void vkapi::pagesGetVersion (std::string version_id, std::string group_id, std::string user_id, std::string need_html) { std::string requestParameters; if ((version_id != NULL)&&(version_id != "")) {requestParameters = ("version_id=" + version_id);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);}; if ((need_html != NULL)&&(need_html != "")) {requestParameters += ("&need_html=" + need_html);};; request("pages.getVersion", requestParameters); };
void vkapi::pagesGetTitles (std::string group_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);};; request("pages.getTitles", requestParameters); };
void vkapi::pagesParseWiki (std::string text, std::string group_id) { std::string requestParameters; if ((text != NULL)&&(text != "")) {requestParameters = ("text=" + text);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);};; request("pages.parseWiki", requestParameters); };
void vkapi::pagesSave (std::string text, std::string page_id, std::string group_id, std::string user_id, std::string title) { std::string requestParameters; if ((text != NULL)&&(text != "")) {requestParameters = ("text=" + text);}; if ((page_id != NULL)&&(page_id != "")) {requestParameters += ("&page_id=" + page_id);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);};; request("pages.save", requestParameters); };
void vkapi::pagesSaveAccess (std::string page_id, std::string group_id, std::string user_id, std::string view, std::string edit) { std::string requestParameters; if ((page_id != NULL)&&(page_id != "")) {requestParameters = ("page_id=" + page_id);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);}; if ((view != NULL)&&(view != "")) {requestParameters += ("&view=" + view);}; if ((edit != NULL)&&(edit != "")) {requestParameters += ("&edit=" + edit);};; request("pages.saveAccess", requestParameters); };
void vkapi::photosConfirmTag (std::string owner_id, std::string photo_id, std::string tag_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((photo_id != NULL)&&(photo_id != "")) {requestParameters += ("&photo_id=" + photo_id);}; if ((tag_id != NULL)&&(tag_id != "")) {requestParameters += ("&tag_id=" + tag_id);};; request("photos.confirmTag", requestParameters); };
void vkapi::photosCopy (std::string owner_id, std::string photo_id, std::string access_key) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((photo_id != NULL)&&(photo_id != "")) {requestParameters += ("&photo_id=" + photo_id);}; if ((access_key != NULL)&&(access_key != "")) {requestParameters += ("&access_key=" + access_key);};; request("photos.copy", requestParameters); };
void vkapi::photosCreateAlbum (std::string title, std::string group_id, std::string description, std::string privacy_view, std::string privacy_comment, std::string upload_by_admins_only, std::string comments_disabled, std::string privacy, std::string comment_privacy) { std::string requestParameters; if ((title != NULL)&&(title != "")) {requestParameters = ("title=" + title);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);}; if ((description != NULL)&&(description != "")) {requestParameters += ("&description=" + description);}; if ((privacy_view != NULL)&&(privacy_view != "")) {requestParameters += ("&privacy_view=" + privacy_view);}; if ((privacy_comment != NULL)&&(privacy_comment != "")) {requestParameters += ("&privacy_comment=" + privacy_comment);}; if ((upload_by_admins_only != NULL)&&(upload_by_admins_only != "")) {requestParameters += ("&upload_by_admins_only=" + upload_by_admins_only);}; if ((comments_disabled != NULL)&&(comments_disabled != "")) {requestParameters += ("&comments_disabled=" + comments_disabled);}; if ((privacy != NULL)&&(privacy != "")) {requestParameters += ("&privacy=" + privacy);}; if ((comment_privacy != NULL)&&(comment_privacy != "")) {requestParameters += ("&comment_privacy=" + comment_privacy);};; request("photos.createAlbum", requestParameters); };
void vkapi::photosCreateComment (std::string owner_id, std::string photo_id, std::string message, std::string attachments, std::string from_group, std::string reply_to_comment, std::string sticker_id, std::string access_key, std::string guid) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((photo_id != NULL)&&(photo_id != "")) {requestParameters += ("&photo_id=" + photo_id);}; if ((message != NULL)&&(message != "")) {requestParameters += ("&message=" + message);}; if ((attachments != NULL)&&(attachments != "")) {requestParameters += ("&attachments=" + attachments);}; if ((from_group != NULL)&&(from_group != "")) {requestParameters += ("&from_group=" + from_group);}; if ((reply_to_comment != NULL)&&(reply_to_comment != "")) {requestParameters += ("&reply_to_comment=" + reply_to_comment);}; if ((sticker_id != NULL)&&(sticker_id != "")) {requestParameters += ("&sticker_id=" + sticker_id);}; if ((access_key != NULL)&&(access_key != "")) {requestParameters += ("&access_key=" + access_key);}; if ((guid != NULL)&&(guid != "")) {requestParameters += ("&guid=" + guid);};; request("photos.createComment", requestParameters); };
void vkapi::photosDeleteAlbum (std::string album_id, std::string group_id) { std::string requestParameters; if ((album_id != NULL)&&(album_id != "")) {requestParameters = ("album_id=" + album_id);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);};; request("photos.deleteAlbum", requestParameters); };
void vkapi::photosDelete (std::string owner_id, std::string photo_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((photo_id != NULL)&&(photo_id != "")) {requestParameters += ("&photo_id=" + photo_id);};; request("photos.delete", requestParameters); };
void vkapi::photosDeleteComment (std::string owner_id, std::string comment_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters += ("&comment_id=" + comment_id);};; request("photos.deleteComment", requestParameters); };
void vkapi::photosEdit (std::string owner_id, std::string photo_id, std::string caption, std::string latitude, std::string long_itude, std::string place_str, std::string foursquare_id, std::string delete_place) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((photo_id != NULL)&&(photo_id != "")) {requestParameters += ("&photo_id=" + photo_id);}; if ((caption != NULL)&&(caption != "")) {requestParameters += ("&caption=" + caption);}; if ((latitude != NULL)&&(latitude != "")) {requestParameters += ("&latitude=" + latitude);}; if ((long_itude != NULL)&&(long_itude != "")) {requestParameters += ("&longitude=" + long_itude);}; if ((place_str != NULL)&&(place_str != "")) {requestParameters += ("&place_str=" + place_str);}; if ((foursquare_id != NULL)&&(foursquare_id != "")) {requestParameters += ("&foursquare_id=" + foursquare_id);}; if ((delete_place != NULL)&&(delete_place != "")) {requestParameters += ("&delete_place=" + delete_place);};; request("photos.edit", requestParameters); };
void vkapi::photosEditComment (std::string owner_id, std::string comment_id, std::string message, std::string attachments) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters += ("&comment_id=" + comment_id);}; if ((message != NULL)&&(message != "")) {requestParameters += ("&message=" + message);}; if ((attachments != NULL)&&(attachments != "")) {requestParameters += ("&attachments=" + attachments);};; request("photos.editComment", requestParameters); };
void vkapi::photosEditAlbum (std::string album_id, std::string title, std::string description, std::string owner_id, std::string privacy_view, std::string privacy_comment, std::string upload_by_admins_only, std::string comments_disabled, std::string privacy, std::string comment_privacy) { std::string requestParameters; if ((album_id != NULL)&&(album_id != "")) {requestParameters = ("album_id=" + album_id);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);}; if ((description != NULL)&&(description != "")) {requestParameters += ("&description=" + description);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((privacy_view != NULL)&&(privacy_view != "")) {requestParameters += ("&privacy_view=" + privacy_view);}; if ((privacy_comment != NULL)&&(privacy_comment != "")) {requestParameters += ("&privacy_comment=" + privacy_comment);}; if ((upload_by_admins_only != NULL)&&(upload_by_admins_only != "")) {requestParameters += ("&upload_by_admins_only=" + upload_by_admins_only);}; if ((comments_disabled != NULL)&&(comments_disabled != "")) {requestParameters += ("&comments_disabled=" + comments_disabled);}; if ((privacy != NULL)&&(privacy != "")) {requestParameters += ("&privacy=" + privacy);}; if ((comment_privacy != NULL)&&(comment_privacy != "")) {requestParameters += ("&comment_privacy=" + comment_privacy);};; request("photos.editAlbum", requestParameters); };
void vkapi::photosGet (std::string owner_id, std::string album_id, std::string photo_ids, std::string rev, std::string extended, std::string feed_type, std::string feed, std::string photo_sizes, std::string offset, std::string count) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);}; if ((photo_ids != NULL)&&(photo_ids != "")) {requestParameters += ("&photo_ids=" + photo_ids);}; if ((rev != NULL)&&(rev != "")) {requestParameters += ("&rev=" + rev);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((feed_type != NULL)&&(feed_type != "")) {requestParameters += ("&feed_type=" + feed_type);}; if ((feed != NULL)&&(feed != "")) {requestParameters += ("&feed=" + feed);}; if ((photo_sizes != NULL)&&(photo_sizes != "")) {requestParameters += ("&photo_sizes=" + photo_sizes);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("photos.get", requestParameters); };
void vkapi::photosGetAlbums (std::string owner_id, std::string album_ids, std::string offset, std::string count, std::string need_system, std::string need_covers, std::string photo_sizes) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((album_ids != NULL)&&(album_ids != "")) {requestParameters += ("&album_ids=" + album_ids);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((need_system != NULL)&&(need_system != "")) {requestParameters += ("&need_system=" + need_system);}; if ((need_covers != NULL)&&(need_covers != "")) {requestParameters += ("&need_covers=" + need_covers);}; if ((photo_sizes != NULL)&&(photo_sizes != "")) {requestParameters += ("&photo_sizes=" + photo_sizes);};; request("photos.getAlbums", requestParameters); };
void vkapi::photosGetAlbumsCount (std::string user_id, std::string group_id) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);};; request("photos.getAlbumsCount", requestParameters); };
void vkapi::photosGetAll (std::string owner_id, std::string extended, std::string offset, std::string count, std::string photo_sizes, std::string no_service_albums, std::string need_hidden, std::string skip_hidden) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((photo_sizes != NULL)&&(photo_sizes != "")) {requestParameters += ("&photo_sizes=" + photo_sizes);}; if ((no_service_albums != NULL)&&(no_service_albums != "")) {requestParameters += ("&no_service_albums=" + no_service_albums);}; if ((need_hidden != NULL)&&(need_hidden != "")) {requestParameters += ("&need_hidden=" + need_hidden);}; if ((skip_hidden != NULL)&&(skip_hidden != "")) {requestParameters += ("&skip_hidden=" + skip_hidden);};; request("photos.getAll", requestParameters); };
void vkapi::photosGetAllComments (std::string owner_id, std::string album_id, std::string need_likes, std::string offset, std::string count) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);}; if ((need_likes != NULL)&&(need_likes != "")) {requestParameters += ("&need_likes=" + need_likes);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("photos.getAllComments", requestParameters); };
void vkapi::photosGetById (std::string photos, std::string extended, std::string photo_sizes) { std::string requestParameters; if ((photos != NULL)&&(photos != "")) {requestParameters = ("photos=" + photos);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((photo_sizes != NULL)&&(photo_sizes != "")) {requestParameters += ("&photo_sizes=" + photo_sizes);};; request("photos.getById", requestParameters); };
void vkapi::photosGetChatUploadServer (std::string chat_id, std::string crop_x, std::string crop_y, std::string crop_width) { std::string requestParameters; if ((chat_id != NULL)&&(chat_id != "")) {requestParameters = ("chat_id=" + chat_id);}; if ((crop_x != NULL)&&(crop_x != "")) {requestParameters += ("&crop_x=" + crop_x);}; if ((crop_y != NULL)&&(crop_y != "")) {requestParameters += ("&crop_y=" + crop_y);}; if ((crop_width != NULL)&&(crop_width != "")) {requestParameters += ("&crop_width=" + crop_width);};; request("photos.getChatUploadServer", requestParameters); };
void vkapi::photosGetComments (std::string owner_id, std::string photo_id, std::string need_likes, std::string start_comment_id, std::string offset, std::string count, std::string sort, std::string access_key, std::string extended, std::string fields, std::string skip_before_id, std::string skip_after_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((photo_id != NULL)&&(photo_id != "")) {requestParameters += ("&photo_id=" + photo_id);}; if ((need_likes != NULL)&&(need_likes != "")) {requestParameters += ("&need_likes=" + need_likes);}; if ((start_comment_id != NULL)&&(start_comment_id != "")) {requestParameters += ("&start_comment_id=" + start_comment_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((sort != NULL)&&(sort != "")) {requestParameters += ("&sort=" + sort);}; if ((access_key != NULL)&&(access_key != "")) {requestParameters += ("&access_key=" + access_key);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((skip_before_id != NULL)&&(skip_before_id != "")) {requestParameters += ("&skip_before_id=" + skip_before_id);}; if ((skip_after_id != NULL)&&(skip_after_id != "")) {requestParameters += ("&skip_after_id=" + skip_after_id);};; request("photos.getComments", requestParameters); };
void vkapi::photosGetNewTags (std::string offset, std::string count) { std::string requestParameters; if ((offset != NULL)&&(offset != "")) {requestParameters = ("offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("photos.getNewTags", requestParameters); };
void vkapi::photosGetMessagesUploadServer () { request("photos.getMessagesUploadServer"); };
void vkapi::photosGetOwnerPhotoUploadServer (std::string owner_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);};; request("photos.getOwnerPhotoUploadServer", requestParameters); };
void vkapi::photosGetTags (std::string owner_id, std::string photo_id, std::string access_key) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((photo_id != NULL)&&(photo_id != "")) {requestParameters += ("&photo_id=" + photo_id);}; if ((access_key != NULL)&&(access_key != "")) {requestParameters += ("&access_key=" + access_key);};; request("photos.getTags", requestParameters); };
void vkapi::photosGetUploadServer (std::string album_id, std::string group_id) { std::string requestParameters; if ((album_id != NULL)&&(album_id != "")) {requestParameters = ("album_id=" + album_id);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);};; request("photos.getUploadServer", requestParameters); };
void vkapi::photosGetWallUploadServer (std::string group_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);};; request("photos.getWallUploadServer", requestParameters); };
void vkapi::photosGetUserPhotos (std::string user_id, std::string offset, std::string count, std::string extended, std::string sort) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((sort != NULL)&&(sort != "")) {requestParameters += ("&sort=" + sort);};; request("photos.getUserPhotos", requestParameters); };
void vkapi::photosMakeCover (std::string owner_id, std::string photo_id, std::string album_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((photo_id != NULL)&&(photo_id != "")) {requestParameters += ("&photo_id=" + photo_id);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);};; request("photos.makeCover", requestParameters); };
void vkapi::photosMove (std::string owner_id, std::string target_album_id, std::string photo_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((target_album_id != NULL)&&(target_album_id != "")) {requestParameters += ("&target_album_id=" + target_album_id);}; if ((photo_id != NULL)&&(photo_id != "")) {requestParameters += ("&photo_id=" + photo_id);};; request("photos.move", requestParameters); };
void vkapi::photosRemoveTag (std::string owner_id, std::string photo_id, std::string tag_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((photo_id != NULL)&&(photo_id != "")) {requestParameters += ("&photo_id=" + photo_id);}; if ((tag_id != NULL)&&(tag_id != "")) {requestParameters += ("&tag_id=" + tag_id);};; request("photos.removeTag", requestParameters); };
void vkapi::photosReorderPhotos (std::string owner_id, std::string photo_id, std::string before, std::string after) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((photo_id != NULL)&&(photo_id != "")) {requestParameters += ("&photo_id=" + photo_id);}; if ((before != NULL)&&(before != "")) {requestParameters += ("&before=" + before);}; if ((after != NULL)&&(after != "")) {requestParameters += ("&after=" + after);};; request("photos.reorderPhotos", requestParameters); };
void vkapi::photosReorderAlbums (std::string owner_id, std::string album_id, std::string before, std::string after) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);}; if ((before != NULL)&&(before != "")) {requestParameters += ("&before=" + before);}; if ((after != NULL)&&(after != "")) {requestParameters += ("&after=" + after);};; request("photos.reorderAlbums", requestParameters); };
void vkapi::photosPutTag (std::string owner_id, std::string photo_id, std::string user_id, std::string x, std::string y) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((photo_id != NULL)&&(photo_id != "")) {requestParameters += ("&photo_id=" + photo_id);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);}; if ((x != NULL)&&(x != "")) {requestParameters += ("&x=" + x);}; if ((y != NULL)&&(y != "")) {requestParameters += ("&y=" + y);};; request("photos.putTag", requestParameters); };
void vkapi::photosReport (std::string owner_id, std::string photo_id, std::string reason) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((photo_id != NULL)&&(photo_id != "")) {requestParameters += ("&photo_id=" + photo_id);}; if ((reason != NULL)&&(reason != "")) {requestParameters += ("&reason=" + reason);};; request("photos.report", requestParameters); };
void vkapi::photosRestore (std::string owner_id, std::string photo_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((photo_id != NULL)&&(photo_id != "")) {requestParameters += ("&photo_id=" + photo_id);};; request("photos.restore", requestParameters); };
void vkapi::photosReportComment (std::string owner_id, std::string comment_id, std::string reason) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters += ("&comment_id=" + comment_id);}; if ((reason != NULL)&&(reason != "")) {requestParameters += ("&reason=" + reason);};; request("photos.reportComment", requestParameters); };
void vkapi::photosRestoreComment (std::string owner_id, std::string comment_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters += ("&comment_id=" + comment_id);};; request("photos.restoreComment", requestParameters); };
void vkapi::photosSave (std::string album_id, std::string group_id, std::string server, std::string photos_list, std::string hash, std::string latitude, std::string long_itude, std::string caption) { std::string requestParameters; if ((album_id != NULL)&&(album_id != "")) {requestParameters = ("album_id=" + album_id);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);}; if ((server != NULL)&&(server != "")) {requestParameters += ("&server=" + server);}; if ((photos_list != NULL)&&(photos_list != "")) {requestParameters += ("&photos_list=" + photos_list);}; if ((hash != NULL)&&(hash != "")) {requestParameters += ("&hash=" + hash);}; if ((latitude != NULL)&&(latitude != "")) {requestParameters += ("&latitude=" + latitude);}; if ((long_itude != NULL)&&(long_itude != "")) {requestParameters += ("&longitude=" + long_itude);}; if ((caption != NULL)&&(caption != "")) {requestParameters += ("&caption=" + caption);};; request("photos.save", requestParameters); };
void vkapi::photosSaveMessagesPhoto (std::string photo) { std::string requestParameters; if ((photo != NULL)&&(photo != "")) {requestParameters = ("photo=" + photo);};; request("photos.saveMessagesPhoto", requestParameters); };
void vkapi::photosSaveOwnerPhoto (std::string server, std::string hash, std::string photo) { std::string requestParameters; if ((server != NULL)&&(server != "")) {requestParameters = ("server=" + server);}; if ((hash != NULL)&&(hash != "")) {requestParameters += ("&hash=" + hash);}; if ((photo != NULL)&&(photo != "")) {requestParameters += ("&photo=" + photo);};; request("photos.saveOwnerPhoto", requestParameters); };
void vkapi::photosSaveWallPhoto (std::string user_id, std::string group_id, std::string photo, std::string server, std::string hash) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);}; if ((photo != NULL)&&(photo != "")) {requestParameters += ("&photo=" + photo);}; if ((server != NULL)&&(server != "")) {requestParameters += ("&server=" + server);}; if ((hash != NULL)&&(hash != "")) {requestParameters += ("&hash=" + hash);};; request("photos.saveWallPhoto", requestParameters); };
void vkapi::placesAdd (std::string type, std::string title, std::string latitude, std::string long_itude, std::string country, std::string city, std::string address) { std::string requestParameters; if ((type != NULL)&&(type != "")) {requestParameters = ("type=" + type);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);}; if ((latitude != NULL)&&(latitude != "")) {requestParameters += ("&latitude=" + latitude);}; if ((long_itude != NULL)&&(long_itude != "")) {requestParameters += ("&longitude=" + long_itude);}; if ((country != NULL)&&(country != "")) {requestParameters += ("&country=" + country);}; if ((city != NULL)&&(city != "")) {requestParameters += ("&city=" + city);}; if ((address != NULL)&&(address != "")) {requestParameters += ("&address=" + address);};; request("places.add", requestParameters); };
void vkapi::photosSearch (std::string q, std::string lat, std::string long_, std::string start_time, std::string end_time, std::string sort, std::string offset, std::string count, std::string radius) { std::string requestParameters; if ((q != NULL)&&(q != "")) {requestParameters = ("q=" + q);}; if ((lat != NULL)&&(lat != "")) {requestParameters += ("&lat=" + lat);}; if ((long_ != NULL)&&(long_ != "")) {requestParameters += ("&long=" + long_);}; if ((start_time != NULL)&&(start_time != "")) {requestParameters += ("&start_time=" + start_time);}; if ((end_time != NULL)&&(end_time != "")) {requestParameters += ("&end_time=" + end_time);}; if ((sort != NULL)&&(sort != "")) {requestParameters += ("&sort=" + sort);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((radius != NULL)&&(radius != "")) {requestParameters += ("&radius=" + radius);};; request("photos.search", requestParameters); };
void vkapi::placesCheckin (std::string place_id, std::string text, std::string latitude, std::string long_itude, std::string friends_only, std::string services) { std::string requestParameters; if ((place_id != NULL)&&(place_id != "")) {requestParameters = ("place_id=" + place_id);}; if ((text != NULL)&&(text != "")) {requestParameters += ("&text=" + text);}; if ((latitude != NULL)&&(latitude != "")) {requestParameters += ("&latitude=" + latitude);}; if ((long_itude != NULL)&&(long_itude != "")) {requestParameters += ("&longitude=" + long_itude);}; if ((friends_only != NULL)&&(friends_only != "")) {requestParameters += ("&friends_only=" + friends_only);}; if ((services != NULL)&&(services != "")) {requestParameters += ("&services=" + services);};; request("places.checkin", requestParameters); };
void vkapi::placesGetById (std::string places) { std::string requestParameters; if ((places != NULL)&&(places != "")) {requestParameters = ("places=" + places);};; request("places.getById", requestParameters); };
void vkapi::placesGetCheckins (std::string latitude, std::string long_itude, std::string place, std::string user_id, std::string offset, std::string count, std::string timestamp, std::string friends_only, std::string need_places) { std::string requestParameters; if ((latitude != NULL)&&(latitude != "")) {requestParameters = ("latitude=" + latitude);}; if ((long_itude != NULL)&&(long_itude != "")) {requestParameters += ("&longitude=" + long_itude);}; if ((place != NULL)&&(place != "")) {requestParameters += ("&place=" + place);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((timestamp != NULL)&&(timestamp != "")) {requestParameters += ("&timestamp=" + timestamp);}; if ((friends_only != NULL)&&(friends_only != "")) {requestParameters += ("&friends_only=" + friends_only);}; if ((need_places != NULL)&&(need_places != "")) {requestParameters += ("&need_places=" + need_places);};; request("places.getCheckins", requestParameters); };
void vkapi::placesGetTypes () { request("places.getTypes"); };
void vkapi::placesSearch (std::string q, std::string city, std::string latitude, std::string long_itude, std::string radius, std::string offset, std::string count) { std::string requestParameters; if ((q != NULL)&&(q != "")) {requestParameters = ("q=" + q);}; if ((city != NULL)&&(city != "")) {requestParameters += ("&city=" + city);}; if ((latitude != NULL)&&(latitude != "")) {requestParameters += ("&latitude=" + latitude);}; if ((long_itude != NULL)&&(long_itude != "")) {requestParameters += ("&longitude=" + long_itude);}; if ((radius != NULL)&&(radius != "")) {requestParameters += ("&radius=" + radius);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("places.search", requestParameters); };
void vkapi::pollsAddVote (std::string owner_id, std::string poll_id, std::string answer_id, std::string is_board) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((poll_id != NULL)&&(poll_id != "")) {requestParameters += ("&poll_id=" + poll_id);}; if ((answer_id != NULL)&&(answer_id != "")) {requestParameters += ("&answer_id=" + answer_id);}; if ((is_board != NULL)&&(is_board != "")) {requestParameters += ("&is_board=" + is_board);};; request("polls.addVote", requestParameters); };
void vkapi::pollsCreate (std::string question, std::string is_anonymous, std::string owner_id, std::string add_answers) { std::string requestParameters; if ((question != NULL)&&(question != "")) {requestParameters = ("question=" + question);}; if ((is_anonymous != NULL)&&(is_anonymous != "")) {requestParameters += ("&is_anonymous=" + is_anonymous);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((add_answers != NULL)&&(add_answers != "")) {requestParameters += ("&add_answers=" + add_answers);};; request("polls.create", requestParameters); };
void vkapi::pollsDeleteVote (std::string owner_id, std::string poll_id, std::string answer_id, std::string is_board) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((poll_id != NULL)&&(poll_id != "")) {requestParameters += ("&poll_id=" + poll_id);}; if ((answer_id != NULL)&&(answer_id != "")) {requestParameters += ("&answer_id=" + answer_id);}; if ((is_board != NULL)&&(is_board != "")) {requestParameters += ("&is_board=" + is_board);};; request("polls.deleteVote", requestParameters); };
void vkapi::pollsEdit (std::string owner_id, std::string poll_id, std::string question, std::string add_answers, std::string edit_answers, std::string delete_answers) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((poll_id != NULL)&&(poll_id != "")) {requestParameters += ("&poll_id=" + poll_id);}; if ((question != NULL)&&(question != "")) {requestParameters += ("&question=" + question);}; if ((add_answers != NULL)&&(add_answers != "")) {requestParameters += ("&add_answers=" + add_answers);}; if ((edit_answers != NULL)&&(edit_answers != "")) {requestParameters += ("&edit_answers=" + edit_answers);}; if ((delete_answers != NULL)&&(delete_answers != "")) {requestParameters += ("&delete_answers=" + delete_answers);};; request("polls.edit", requestParameters); };
void vkapi::pollsGetById (std::string owner_id, std::string is_board, std::string poll_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((is_board != NULL)&&(is_board != "")) {requestParameters += ("&is_board=" + is_board);}; if ((poll_id != NULL)&&(poll_id != "")) {requestParameters += ("&poll_id=" + poll_id);};; request("polls.getById", requestParameters); };
void vkapi::pollsGetVoters (std::string owner_id, std::string poll_id, std::string answer_ids, std::string is_board, std::string friends_only, std::string offset, std::string count, std::string fields, std::string name_case) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((poll_id != NULL)&&(poll_id != "")) {requestParameters += ("&poll_id=" + poll_id);}; if ((answer_ids != NULL)&&(answer_ids != "")) {requestParameters += ("&answer_ids=" + answer_ids);}; if ((is_board != NULL)&&(is_board != "")) {requestParameters += ("&is_board=" + is_board);}; if ((friends_only != NULL)&&(friends_only != "")) {requestParameters += ("&friends_only=" + friends_only);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((name_case != NULL)&&(name_case != "")) {requestParameters += ("&name_case=" + name_case);};; request("polls.getVoters", requestParameters); };
void vkapi::statsGet (std::string group_id, std::string app_id, std::string date_from, std::string date_to) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((app_id != NULL)&&(app_id != "")) {requestParameters += ("&app_id=" + app_id);}; if ((date_from != NULL)&&(date_from != "")) {requestParameters += ("&date_from=" + date_from);}; if ((date_to != NULL)&&(date_to != "")) {requestParameters += ("&date_to=" + date_to);};; request("stats.get", requestParameters); };
void vkapi::searchGetHints (std::string q, std::string limit, std::string filters, std::string search_global) { std::string requestParameters; if ((q != NULL)&&(q != "")) {requestParameters = ("q=" + q);}; if ((limit != NULL)&&(limit != "")) {requestParameters += ("&limit=" + limit);}; if ((filters != NULL)&&(filters != "")) {requestParameters += ("&filters=" + filters);}; if ((search_global != NULL)&&(search_global != "")) {requestParameters += ("&search_global=" + search_global);};; request("search.getHints", requestParameters); };
void vkapi::statsGetPostReach (std::string owner_id, std::string post_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((post_id != NULL)&&(post_id != "")) {requestParameters += ("&post_id=" + post_id);};; request("stats.getPostReach", requestParameters); };
void vkapi::statusGet (std::string user_id, std::string group_id) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);};; request("status.get", requestParameters); };
void vkapi::statsTrackVisitor () { request("stats.trackVisitor"); };
void vkapi::storageGet (std::string key, std::string keys, std::string user_id, std::string global) { std::string requestParameters; if ((key != NULL)&&(key != "")) {requestParameters = ("key=" + key);}; if ((keys != NULL)&&(keys != "")) {requestParameters += ("&keys=" + keys);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);}; if ((global != NULL)&&(global != "")) {requestParameters += ("&global=" + global);};; request("storage.get", requestParameters); };
void vkapi::statusSet (std::string text, std::string group_id) { std::string requestParameters; if ((text != NULL)&&(text != "")) {requestParameters = ("text=" + text);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);};; request("status.set", requestParameters); };
void vkapi::storageGetKeys (std::string user_id, std::string global, std::string offset, std::string count) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((global != NULL)&&(global != "")) {requestParameters += ("&global=" + global);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("storage.getKeys", requestParameters); };
void vkapi::usersGet (std::string user_ids, std::string fields, std::string name_case) { std::string requestParameters; if ((user_ids != NULL)&&(user_ids != "")) {requestParameters = ("user_ids=" + user_ids);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((name_case != NULL)&&(name_case != "")) {requestParameters += ("&name_case=" + name_case);};; request("users.get", requestParameters); };
void vkapi::storageSet (std::string key, std::string value, std::string user_id, std::string global) { std::string requestParameters; if ((key != NULL)&&(key != "")) {requestParameters = ("key=" + key);}; if ((value != NULL)&&(value != "")) {requestParameters += ("&value=" + value);}; if ((user_id != NULL)&&(user_id != "")) {requestParameters += ("&user_id=" + user_id);}; if ((global != NULL)&&(global != "")) {requestParameters += ("&global=" + global);};; request("storage.set", requestParameters); };
void vkapi::usersGetNearby (std::string latitude, std::string long_itude, std::string accuracy, std::string timeout, std::string radius, std::string fields, std::string name_case) { std::string requestParameters; if ((latitude != NULL)&&(latitude != "")) {requestParameters = ("latitude=" + latitude);}; if ((long_itude != NULL)&&(long_itude != "")) {requestParameters += ("&longitude=" + long_itude);}; if ((accuracy != NULL)&&(accuracy != "")) {requestParameters += ("&accuracy=" + accuracy);}; if ((timeout != NULL)&&(timeout != "")) {requestParameters += ("&timeout=" + timeout);}; if ((radius != NULL)&&(radius != "")) {requestParameters += ("&radius=" + radius);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((name_case != NULL)&&(name_case != "")) {requestParameters += ("&name_case=" + name_case);};; request("users.getNearby", requestParameters); };
void vkapi::usersGetFollowers (std::string user_id, std::string offset, std::string count, std::string fields, std::string name_case) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((name_case != NULL)&&(name_case != "")) {requestParameters += ("&name_case=" + name_case);};; request("users.getFollowers", requestParameters); };
void vkapi::usersIsAppUser (std::string user_id) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);};; request("users.isAppUser", requestParameters); };
void vkapi::usersReport (std::string user_id, std::string type, std::string comment) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((type != NULL)&&(type != "")) {requestParameters += ("&type=" + type);}; if ((comment != NULL)&&(comment != "")) {requestParameters += ("&comment=" + comment);};; request("users.report", requestParameters); };
void vkapi::usersSearch (std::string q, std::string sort, std::string offset, std::string count, std::string fields, std::string city, std::string country, std::string hometown, std::string university_country, std::string university, std::string university_year, std::string university_faculty, std::string university_chair, std::string sex, std::string status, std::string age_from, std::string age_to, std::string birth_day, std::string birth_month, std::string birth_year, std::string online, std::string has_photo, std::string school_country, std::string school_city, std::string school_class, std::string school, std::string school_year, std::string religion, std::string interests, std::string company, std::string position, std::string group_id, std::string from_list) { std::string requestParameters; if ((q != NULL)&&(q != "")) {requestParameters = ("q=" + q);}; if ((sort != NULL)&&(sort != "")) {requestParameters += ("&sort=" + sort);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((city != NULL)&&(city != "")) {requestParameters += ("&city=" + city);}; if ((country != NULL)&&(country != "")) {requestParameters += ("&country=" + country);}; if ((hometown != NULL)&&(hometown != "")) {requestParameters += ("&hometown=" + hometown);}; if ((university_country != NULL)&&(university_country != "")) {requestParameters += ("&university_country=" + university_country);}; if ((university != NULL)&&(university != "")) {requestParameters += ("&university=" + university);}; if ((university_year != NULL)&&(university_year != "")) {requestParameters += ("&university_year=" + university_year);}; if ((university_faculty != NULL)&&(university_faculty != "")) {requestParameters += ("&university_faculty=" + university_faculty);}; if ((university_chair != NULL)&&(university_chair != "")) {requestParameters += ("&university_chair=" + university_chair);}; if ((sex != NULL)&&(sex != "")) {requestParameters += ("&sex=" + sex);}; if ((status != NULL)&&(status != "")) {requestParameters += ("&status=" + status);}; if ((age_from != NULL)&&(age_from != "")) {requestParameters += ("&age_from=" + age_from);}; if ((age_to != NULL)&&(age_to != "")) {requestParameters += ("&age_to=" + age_to);}; if ((birth_day != NULL)&&(birth_day != "")) {requestParameters += ("&birth_day=" + birth_day);}; if ((birth_month != NULL)&&(birth_month != "")) {requestParameters += ("&birth_month=" + birth_month);}; if ((birth_year != NULL)&&(birth_year != "")) {requestParameters += ("&birth_year=" + birth_year);}; if ((online != NULL)&&(online != "")) {requestParameters += ("&online=" + online);}; if ((has_photo != NULL)&&(has_photo != "")) {requestParameters += ("&has_photo=" + has_photo);}; if ((school_country != NULL)&&(school_country != "")) {requestParameters += ("&school_country=" + school_country);}; if ((school_city != NULL)&&(school_city != "")) {requestParameters += ("&school_city=" + school_city);}; if ((school_class != NULL)&&(school_class != "")) {requestParameters += ("&school_class=" + school_class);}; if ((school != NULL)&&(school != "")) {requestParameters += ("&school=" + school);}; if ((school_year != NULL)&&(school_year != "")) {requestParameters += ("&school_year=" + school_year);}; if ((religion != NULL)&&(religion != "")) {requestParameters += ("&religion=" + religion);}; if ((interests != NULL)&&(interests != "")) {requestParameters += ("&interests=" + interests);}; if ((company != NULL)&&(company != "")) {requestParameters += ("&company=" + company);}; if ((position != NULL)&&(position != "")) {requestParameters += ("&position=" + position);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);}; if ((from_list != NULL)&&(from_list != "")) {requestParameters += ("&from_list=" + from_list);};; request("users.search", requestParameters); };
void vkapi::utilsCheckLink (std::string url) { std::string requestParameters; if ((url != NULL)&&(url != "")) {requestParameters = ("url=" + url);};; request("utils.checkLink", requestParameters); };
void vkapi::usersGetSubscriptions (std::string user_id, std::string extended, std::string offset, std::string count, std::string fields) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);};; request("users.getSubscriptions", requestParameters); };
void vkapi::utilsGetServerTime () { request("utils.getServerTime"); };
void vkapi::utilsResolveScreenName (std::string screen_name) { std::string requestParameters; if ((screen_name != NULL)&&(screen_name != "")) {requestParameters = ("screen_name=" + screen_name);};; request("utils.resolveScreenName", requestParameters); };
void vkapi::videoAdd (std::string target_id, std::string video_id, std::string owner_id) { std::string requestParameters; if ((target_id != NULL)&&(target_id != "")) {requestParameters = ("target_id=" + target_id);}; if ((video_id != NULL)&&(video_id != "")) {requestParameters += ("&video_id=" + video_id);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);};; request("video.add", requestParameters); };
void vkapi::videoAddAlbum (std::string group_id, std::string title, std::string privacy) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);}; if ((privacy != NULL)&&(privacy != "")) {requestParameters += ("&privacy=" + privacy);};; request("video.addAlbum", requestParameters); };
void vkapi::videoAddToAlbum (std::string target_id, std::string album_id, std::string album_ids, std::string owner_id, std::string video_id) { std::string requestParameters; if ((target_id != NULL)&&(target_id != "")) {requestParameters = ("target_id=" + target_id);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);}; if ((album_ids != NULL)&&(album_ids != "")) {requestParameters += ("&album_ids=" + album_ids);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((video_id != NULL)&&(video_id != "")) {requestParameters += ("&video_id=" + video_id);};; request("video.addToAlbum", requestParameters); };
void vkapi::videoDelete (std::string video_id, std::string owner_id, std::string target_id) { std::string requestParameters; if ((video_id != NULL)&&(video_id != "")) {requestParameters = ("video_id=" + video_id);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((target_id != NULL)&&(target_id != "")) {requestParameters += ("&target_id=" + target_id);};; request("video.delete", requestParameters); };
void vkapi::videoDeleteAlbum (std::string group_id, std::string album_id) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);};; request("video.deleteAlbum", requestParameters); };
void vkapi::videoCreateComment (std::string owner_id, std::string video_id, std::string message, std::string attachments, std::string from_group, std::string reply_to_comment, std::string sticker_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((video_id != NULL)&&(video_id != "")) {requestParameters += ("&video_id=" + video_id);}; if ((message != NULL)&&(message != "")) {requestParameters += ("&message=" + message);}; if ((attachments != NULL)&&(attachments != "")) {requestParameters += ("&attachments=" + attachments);}; if ((from_group != NULL)&&(from_group != "")) {requestParameters += ("&from_group=" + from_group);}; if ((reply_to_comment != NULL)&&(reply_to_comment != "")) {requestParameters += ("&reply_to_comment=" + reply_to_comment);}; if ((sticker_id != NULL)&&(sticker_id != "")) {requestParameters += ("&sticker_id=" + sticker_id);};; request("video.createComment", requestParameters); };
void vkapi::videoDeleteComment (std::string owner_id, std::string comment_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters += ("&comment_id=" + comment_id);};; request("video.deleteComment", requestParameters); };
void vkapi::videoEditAlbum (std::string group_id, std::string album_id, std::string title, std::string privacy) { std::string requestParameters; if ((group_id != NULL)&&(group_id != "")) {requestParameters = ("group_id=" + group_id);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);}; if ((title != NULL)&&(title != "")) {requestParameters += ("&title=" + title);}; if ((privacy != NULL)&&(privacy != "")) {requestParameters += ("&privacy=" + privacy);};; request("video.editAlbum", requestParameters); };
void vkapi::videoEdit (std::string owner_id, std::string video_id, std::string name, std::string desc, std::string privacy_view, std::string privacy_comment, std::string no_comments, std::string repeat) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((video_id != NULL)&&(video_id != "")) {requestParameters += ("&video_id=" + video_id);}; if ((name != NULL)&&(name != "")) {requestParameters += ("&name=" + name);}; if ((desc != NULL)&&(desc != "")) {requestParameters += ("&desc=" + desc);}; if ((privacy_view != NULL)&&(privacy_view != "")) {requestParameters += ("&privacy_view=" + privacy_view);}; if ((privacy_comment != NULL)&&(privacy_comment != "")) {requestParameters += ("&privacy_comment=" + privacy_comment);}; if ((no_comments != NULL)&&(no_comments != "")) {requestParameters += ("&no_comments=" + no_comments);}; if ((repeat != NULL)&&(repeat != "")) {requestParameters += ("&repeat=" + repeat);};; request("video.edit", requestParameters); };
void vkapi::videoEditComment (std::string owner_id, std::string comment_id, std::string message, std::string attachments) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters += ("&comment_id=" + comment_id);}; if ((message != NULL)&&(message != "")) {requestParameters += ("&message=" + message);}; if ((attachments != NULL)&&(attachments != "")) {requestParameters += ("&attachments=" + attachments);};; request("video.editComment", requestParameters); };
void vkapi::videoGetAlbumById (std::string owner_id, std::string album_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);};; request("video.getAlbumById", requestParameters); };
void vkapi::videoGetAlbums (std::string owner_id, std::string offset, std::string count, std::string extended, std::string need_system) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((need_system != NULL)&&(need_system != "")) {requestParameters += ("&need_system=" + need_system);};; request("video.getAlbums", requestParameters); };
void vkapi::videoGetComments (std::string owner_id, std::string video_id, std::string need_likes, std::string start_comment_id, std::string offset, std::string count, std::string sort, std::string extended) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((video_id != NULL)&&(video_id != "")) {requestParameters += ("&video_id=" + video_id);}; if ((need_likes != NULL)&&(need_likes != "")) {requestParameters += ("&need_likes=" + need_likes);}; if ((start_comment_id != NULL)&&(start_comment_id != "")) {requestParameters += ("&start_comment_id=" + start_comment_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((sort != NULL)&&(sort != "")) {requestParameters += ("&sort=" + sort);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);};; request("video.getComments", requestParameters); };
void vkapi::videoGet (std::string owner_id, std::string videos, std::string album_id, std::string count, std::string offset, std::string extended) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((videos != NULL)&&(videos != "")) {requestParameters += ("&videos=" + videos);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);};; request("video.get", requestParameters); };
void vkapi::videoGetAlbumsByVideo (std::string target_id, std::string owner_id, std::string video_id, std::string extended) { std::string requestParameters; if ((target_id != NULL)&&(target_id != "")) {requestParameters = ("target_id=" + target_id);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((video_id != NULL)&&(video_id != "")) {requestParameters += ("&video_id=" + video_id);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);};; request("video.getAlbumsByVideo", requestParameters); };
void vkapi::videoGetNewTags (std::string offset, std::string count) { std::string requestParameters; if ((offset != NULL)&&(offset != "")) {requestParameters = ("offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("video.getNewTags", requestParameters); };
void vkapi::videoGetTags (std::string owner_id, std::string video_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((video_id != NULL)&&(video_id != "")) {requestParameters += ("&video_id=" + video_id);};; request("video.getTags", requestParameters); };
void vkapi::videoGetUserVideos (std::string user_id, std::string offset, std::string count, std::string extended) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);};; request("video.getUserVideos", requestParameters); };
void vkapi::videoPutTag (std::string user_id, std::string owner_id, std::string video_id, std::string tagged_name) { std::string requestParameters; if ((user_id != NULL)&&(user_id != "")) {requestParameters = ("user_id=" + user_id);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((video_id != NULL)&&(video_id != "")) {requestParameters += ("&video_id=" + video_id);}; if ((tagged_name != NULL)&&(tagged_name != "")) {requestParameters += ("&tagged_name=" + tagged_name);};; request("video.putTag", requestParameters); };
void vkapi::videoRemoveFromAlbum (std::string target_id, std::string album_id, std::string album_ids, std::string owner_id, std::string video_id) { std::string requestParameters; if ((target_id != NULL)&&(target_id != "")) {requestParameters = ("target_id=" + target_id);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);}; if ((album_ids != NULL)&&(album_ids != "")) {requestParameters += ("&album_ids=" + album_ids);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((video_id != NULL)&&(video_id != "")) {requestParameters += ("&video_id=" + video_id);};; request("video.removeFromAlbum", requestParameters); };
void vkapi::videoRemoveTag (std::string tag_id, std::string owner_id, std::string video_id) { std::string requestParameters; if ((tag_id != NULL)&&(tag_id != "")) {requestParameters = ("tag_id=" + tag_id);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);}; if ((video_id != NULL)&&(video_id != "")) {requestParameters += ("&video_id=" + video_id);};; request("video.removeTag", requestParameters); };
void vkapi::videoReorderAlbums (std::string owner_id, std::string album_id, std::string before, std::string after) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);}; if ((before != NULL)&&(before != "")) {requestParameters += ("&before=" + before);}; if ((after != NULL)&&(after != "")) {requestParameters += ("&after=" + after);};; request("video.reorderAlbums", requestParameters); };
void vkapi::videoReport (std::string owner_id, std::string video_id, std::string reason, std::string comment, std::string search_query) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((video_id != NULL)&&(video_id != "")) {requestParameters += ("&video_id=" + video_id);}; if ((reason != NULL)&&(reason != "")) {requestParameters += ("&reason=" + reason);}; if ((comment != NULL)&&(comment != "")) {requestParameters += ("&comment=" + comment);}; if ((search_query != NULL)&&(search_query != "")) {requestParameters += ("&search_query=" + search_query);};; request("video.report", requestParameters); };
void vkapi::videoRestore (std::string video_id, std::string owner_id) { std::string requestParameters; if ((video_id != NULL)&&(video_id != "")) {requestParameters = ("video_id=" + video_id);}; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters += ("&owner_id=" + owner_id);};; request("video.restore", requestParameters); };
void vkapi::videoReportComment (std::string owner_id, std::string comment_id, std::string reason) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters += ("&comment_id=" + comment_id);}; if ((reason != NULL)&&(reason != "")) {requestParameters += ("&reason=" + reason);};; request("video.reportComment", requestParameters); };
void vkapi::videoRestoreComment (std::string owner_id, std::string comment_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters += ("&comment_id=" + comment_id);};; request("video.restoreComment", requestParameters); };
void vkapi::videoSave (std::string name, std::string description, std::string is_private, std::string wallpost, std::string link, std::string group_id, std::string album_id, std::string privacy_view, std::string privacy_comment, std::string no_comments, std::string repeat) { std::string requestParameters; if ((name != NULL)&&(name != "")) {requestParameters = ("name=" + name);}; if ((description != NULL)&&(description != "")) {requestParameters += ("&description=" + description);}; if ((is_private != NULL)&&(is_private != "")) {requestParameters += ("&is_private=" + is_private);}; if ((wallpost != NULL)&&(wallpost != "")) {requestParameters += ("&wallpost=" + wallpost);}; if ((link != NULL)&&(link != "")) {requestParameters += ("&link=" + link);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);}; if ((album_id != NULL)&&(album_id != "")) {requestParameters += ("&album_id=" + album_id);}; if ((privacy_view != NULL)&&(privacy_view != "")) {requestParameters += ("&privacy_view=" + privacy_view);}; if ((privacy_comment != NULL)&&(privacy_comment != "")) {requestParameters += ("&privacy_comment=" + privacy_comment);}; if ((no_comments != NULL)&&(no_comments != "")) {requestParameters += ("&no_comments=" + no_comments);}; if ((repeat != NULL)&&(repeat != "")) {requestParameters += ("&repeat=" + repeat);};; request("video.save", requestParameters); };
void vkapi::videoSearch (std::string q, std::string sort, std::string hd, std::string adult, std::string filters, std::string search_own, std::string offset, std::string long_er, std::string shorter, std::string count, std::string extended) { std::string requestParameters; if ((q != NULL)&&(q != "")) {requestParameters = ("q=" + q);}; if ((sort != NULL)&&(sort != "")) {requestParameters += ("&sort=" + sort);}; if ((hd != NULL)&&(hd != "")) {requestParameters += ("&hd=" + hd);}; if ((adult != NULL)&&(adult != "")) {requestParameters += ("&adult=" + adult);}; if ((filters != NULL)&&(filters != "")) {requestParameters += ("&filters=" + filters);}; if ((search_own != NULL)&&(search_own != "")) {requestParameters += ("&search_own=" + search_own);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((long_er != NULL)&&(long_er != "")) {requestParameters += ("&longer=" + long_er);}; if ((shorter != NULL)&&(shorter != "")) {requestParameters += ("&shorter=" + shorter);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);};; request("video.search", requestParameters); };
void vkapi::wallAddComment (std::string owner_id, std::string post_id, std::string from_group, std::string text, std::string reply_to_comment, std::string attachments, std::string sticker_id, std::string ref) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((post_id != NULL)&&(post_id != "")) {requestParameters += ("&post_id=" + post_id);}; if ((from_group != NULL)&&(from_group != "")) {requestParameters += ("&from_group=" + from_group);}; if ((text != NULL)&&(text != "")) {requestParameters += ("&text=" + text);}; if ((reply_to_comment != NULL)&&(reply_to_comment != "")) {requestParameters += ("&reply_to_comment=" + reply_to_comment);}; if ((attachments != NULL)&&(attachments != "")) {requestParameters += ("&attachments=" + attachments);}; if ((sticker_id != NULL)&&(sticker_id != "")) {requestParameters += ("&sticker_id=" + sticker_id);}; if ((ref != NULL)&&(ref != "")) {requestParameters += ("&ref=" + ref);};; request("wall.addComment", requestParameters); };
void vkapi::wallDelete (std::string owner_id, std::string post_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((post_id != NULL)&&(post_id != "")) {requestParameters += ("&post_id=" + post_id);};; request("wall.delete", requestParameters); };
void vkapi::wallDeleteComment (std::string owner_id, std::string comment_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters += ("&comment_id=" + comment_id);};; request("wall.deleteComment", requestParameters); };
void vkapi::wallEditComment (std::string owner_id, std::string comment_id, std::string message, std::string attachments) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters += ("&comment_id=" + comment_id);}; if ((message != NULL)&&(message != "")) {requestParameters += ("&message=" + message);}; if ((attachments != NULL)&&(attachments != "")) {requestParameters += ("&attachments=" + attachments);};; request("wall.editComment", requestParameters); };
void vkapi::wallEdit (std::string owner_id, std::string post_id, std::string friends_only, std::string message, std::string attachments, std::string services, std::string signed_, std::string publish_date, std::string lat, std::string long_, std::string place_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((post_id != NULL)&&(post_id != "")) {requestParameters += ("&post_id=" + post_id);}; if ((friends_only != NULL)&&(friends_only != "")) {requestParameters += ("&friends_only=" + friends_only);}; if ((message != NULL)&&(message != "")) {requestParameters += ("&message=" + message);}; if ((attachments != NULL)&&(attachments != "")) {requestParameters += ("&attachments=" + attachments);}; if ((services != NULL)&&(services != "")) {requestParameters += ("&services=" + services);}; if ((signed_ != NULL)&&(signed_ != "")) {requestParameters += ("&signed=" + signed_);}; if ((publish_date != NULL)&&(publish_date != "")) {requestParameters += ("&publish_date=" + publish_date);}; if ((lat != NULL)&&(lat != "")) {requestParameters += ("&lat=" + lat);}; if ((long_ != NULL)&&(long_ != "")) {requestParameters += ("&long=" + long_);}; if ((place_id != NULL)&&(place_id != "")) {requestParameters += ("&place_id=" + place_id);};; request("wall.edit", requestParameters); };
void vkapi::wallGet (std::string owner_id, std::string domain, std::string offset, std::string count, std::string filter, std::string extended, std::string fields) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((domain != NULL)&&(domain != "")) {requestParameters += ("&domain=" + domain);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((filter != NULL)&&(filter != "")) {requestParameters += ("&filter=" + filter);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);};; request("wall.get", requestParameters); };
void vkapi::wallGetById (std::string posts, std::string extended, std::string copy_history_depth, std::string fields) { std::string requestParameters; if ((posts != NULL)&&(posts != "")) {requestParameters = ("posts=" + posts);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((copy_history_depth != NULL)&&(copy_history_depth != "")) {requestParameters += ("&copy_history_depth=" + copy_history_depth);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);};; request("wall.getById", requestParameters); };
void vkapi::wallGetComments (std::string owner_id, std::string post_id, std::string need_likes, std::string start_comment_id, std::string offset, std::string count, std::string sort, std::string preview_length, std::string extended) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((post_id != NULL)&&(post_id != "")) {requestParameters += ("&post_id=" + post_id);}; if ((need_likes != NULL)&&(need_likes != "")) {requestParameters += ("&need_likes=" + need_likes);}; if ((start_comment_id != NULL)&&(start_comment_id != "")) {requestParameters += ("&start_comment_id=" + start_comment_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((sort != NULL)&&(sort != "")) {requestParameters += ("&sort=" + sort);}; if ((preview_length != NULL)&&(preview_length != "")) {requestParameters += ("&preview_length=" + preview_length);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);};; request("wall.getComments", requestParameters); };
void vkapi::wallGetReposts (std::string owner_id, std::string post_id, std::string offset, std::string count) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((post_id != NULL)&&(post_id != "")) {requestParameters += ("&post_id=" + post_id);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("wall.getReposts", requestParameters); };
void vkapi::wallPin (std::string owner_id, std::string post_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((post_id != NULL)&&(post_id != "")) {requestParameters += ("&post_id=" + post_id);};; request("wall.pin", requestParameters); };
void vkapi::wallReportComment (std::string owner_id, std::string comment_id, std::string reason) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters += ("&comment_id=" + comment_id);}; if ((reason != NULL)&&(reason != "")) {requestParameters += ("&reason=" + reason);};; request("wall.reportComment", requestParameters); };
void vkapi::wallReportPost (std::string owner_id, std::string post_id, std::string reason) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((post_id != NULL)&&(post_id != "")) {requestParameters += ("&post_id=" + post_id);}; if ((reason != NULL)&&(reason != "")) {requestParameters += ("&reason=" + reason);};; request("wall.reportPost", requestParameters); };
void vkapi::wallRepost (std::string object, std::string message, std::string group_id, std::string ref) { std::string requestParameters; if ((object != NULL)&&(object != "")) {requestParameters = ("object=" + object);}; if ((message != NULL)&&(message != "")) {requestParameters += ("&message=" + message);}; if ((group_id != NULL)&&(group_id != "")) {requestParameters += ("&group_id=" + group_id);}; if ((ref != NULL)&&(ref != "")) {requestParameters += ("&ref=" + ref);};; request("wall.repost", requestParameters); };
void vkapi::wallPost (std::string owner_id, std::string friends_only, std::string from_group, std::string message, std::string attachments, std::string services, std::string signed_, std::string publish_date, std::string lat, std::string long_, std::string place_id, std::string post_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((friends_only != NULL)&&(friends_only != "")) {requestParameters += ("&friends_only=" + friends_only);}; if ((from_group != NULL)&&(from_group != "")) {requestParameters += ("&from_group=" + from_group);}; if ((message != NULL)&&(message != "")) {requestParameters += ("&message=" + message);}; if ((attachments != NULL)&&(attachments != "")) {requestParameters += ("&attachments=" + attachments);}; if ((services != NULL)&&(services != "")) {requestParameters += ("&services=" + services);}; if ((signed_ != NULL)&&(signed_ != "")) {requestParameters += ("&signed=" + signed_);}; if ((publish_date != NULL)&&(publish_date != "")) {requestParameters += ("&publish_date=" + publish_date);}; if ((lat != NULL)&&(lat != "")) {requestParameters += ("&lat=" + lat);}; if ((long_ != NULL)&&(long_ != "")) {requestParameters += ("&long=" + long_);}; if ((place_id != NULL)&&(place_id != "")) {requestParameters += ("&place_id=" + place_id);}; if ((post_id != NULL)&&(post_id != "")) {requestParameters += ("&post_id=" + post_id);};; request("wall.post", requestParameters); };
void vkapi::wallRestore (std::string owner_id, std::string post_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((post_id != NULL)&&(post_id != "")) {requestParameters += ("&post_id=" + post_id);};; request("wall.restore", requestParameters); };
void vkapi::wallSearch (std::string owner_id, std::string domain, std::string query, std::string owners_only, std::string count, std::string offset, std::string extended, std::string fields) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((domain != NULL)&&(domain != "")) {requestParameters += ("&domain=" + domain);}; if ((query != NULL)&&(query != "")) {requestParameters += ("&query=" + query);}; if ((owners_only != NULL)&&(owners_only != "")) {requestParameters += ("&owners_only=" + owners_only);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((extended != NULL)&&(extended != "")) {requestParameters += ("&extended=" + extended);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);};; request("wall.search", requestParameters); };
void vkapi::wallUnpin (std::string owner_id, std::string post_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((post_id != NULL)&&(post_id != "")) {requestParameters += ("&post_id=" + post_id);};; request("wall.unpin", requestParameters); };
void vkapi::widgetsGetComments (std::string widget_api_id, std::string url, std::string page_id, std::string order, std::string fields, std::string offset, std::string count) { std::string requestParameters; if ((widget_api_id != NULL)&&(widget_api_id != "")) {requestParameters = ("widget_api_id=" + widget_api_id);}; if ((url != NULL)&&(url != "")) {requestParameters += ("&url=" + url);}; if ((page_id != NULL)&&(page_id != "")) {requestParameters += ("&page_id=" + page_id);}; if ((order != NULL)&&(order != "")) {requestParameters += ("&order=" + order);}; if ((fields != NULL)&&(fields != "")) {requestParameters += ("&fields=" + fields);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("widgets.getComments", requestParameters); };
void vkapi::wallRestoreComment (std::string owner_id, std::string comment_id) { std::string requestParameters; if ((owner_id != NULL)&&(owner_id != "")) {requestParameters = ("owner_id=" + owner_id);}; if ((comment_id != NULL)&&(comment_id != "")) {requestParameters += ("&comment_id=" + comment_id);};; request("wall.restoreComment", requestParameters); };
void vkapi::widgetsGetPages (std::string widget_api_id, std::string order, std::string period, std::string offset, std::string count) { std::string requestParameters; if ((widget_api_id != NULL)&&(widget_api_id != "")) {requestParameters = ("widget_api_id=" + widget_api_id);}; if ((order != NULL)&&(order != "")) {requestParameters += ("&order=" + order);}; if ((period != NULL)&&(period != "")) {requestParameters += ("&period=" + period);}; if ((offset != NULL)&&(offset != "")) {requestParameters += ("&offset=" + offset);}; if ((count != NULL)&&(count != "")) {requestParameters += ("&count=" + count);};; request("widgets.getPages", requestParameters); };
