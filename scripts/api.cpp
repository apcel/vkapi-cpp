void vkapi::accountBanUser (std::string user_id) { request("account.banUser", "user_id=" + user_id); };
void vkapi::accountGetActiveOffers (std::string offset, std::string count) { request("account.getActiveOffers", "offset=" + offset + "&count=" + count); };
void vkapi::accountChangePassword (std::string restore_sid, std::string change_password_hash, std::string old_password, std::string new_password) { request("account.changePassword", "restore_sid=" + restore_sid + "&change_password_hash=" + change_password_hash + "&old_password=" + old_password + "&new_password=" + new_password); };
void vkapi::accountGetAppPermissions (std::string user_id) { request("account.getAppPermissions", "user_id=" + user_id); };
void vkapi::accountGetBanned (std::string offset, std::string count) { request("account.getBanned", "offset=" + offset + "&count=" + count); };
void vkapi::accountGetCounters (std::string filter) { request("account.getCounters", "filter=" + filter); };
void vkapi::accountGetInfo (std::string fields) { request("account.getInfo", "fields=" + fields); };
void vkapi::accountGetProfileInfo () { request("account.getProfileInfo"); };
void vkapi::accountLookupContacts (std::string contacts, std::string service, std::string mycontact, std::string return_all, std::string fields) { request("account.lookupContacts", "contacts=" + contacts + "&service=" + service + "&mycontact=" + mycontact + "&return_all=" + return_all + "&fields=" + fields); };
void vkapi::accountGetPushSettings (std::string device_id, std::string token) { request("account.getPushSettings", "device_id=" + device_id + "&token=" + token); };
void vkapi::accountSaveProfileInfo (std::string first_name, std::string last_name, std::string maiden_name, std::string screen_name, std::string cancel_request_id, std::string sex, std::string relation, std::string relation_partner_id, std::string bdate, std::string bdate_visibility, std::string home_town, std::string country_id, std::string city_id, std::string status) { request("account.saveProfileInfo", "first_name=" + first_name + "&last_name=" + last_name + "&maiden_name=" + maiden_name + "&screen_name=" + screen_name + "&cancel_request_id=" + cancel_request_id + "&sex=" + sex + "&relation=" + relation + "&relation_partner_id=" + relation_partner_id + "&bdate=" + bdate + "&bdate_visibility=" + bdate_visibility + "&home_town=" + home_town + "&country_id=" + country_id + "&city_id=" + city_id + "&status=" + status); };
void vkapi::accountSetInfo (std::string intro, std::string own_posts_default, std::string no_wall_replies) { request("account.setInfo", "intro=" + intro + "&own_posts_default=" + own_posts_default + "&no_wall_replies=" + no_wall_replies); };
void vkapi::accountRegisterDevice (std::string token, std::string device_model, std::string device_year, std::string device_id, std::string system_version, std::string settings, std::string sandbox, std::string no_text, std::string subscribe) { request("account.registerDevice", "token=" + token + "&device_model=" + device_model + "&device_year=" + device_year + "&device_id=" + device_id + "&system_version=" + system_version + "&settings=" + settings + "&sandbox=" + sandbox + "&no_text=" + no_text + "&subscribe=" + subscribe); };
void vkapi::accountSetNameInMenu (std::string user_id, std::string name) { request("account.setNameInMenu", "user_id=" + user_id + "&name=" + name); };
void vkapi::accountSetOffline () { request("account.setOffline"); };
void vkapi::accountSetOnline (std::string voip) { request("account.setOnline", "voip=" + voip); };
void vkapi::accountSetPushSettings (std::string device_id, std::string settings, std::string key, std::string value) { request("account.setPushSettings", "device_id=" + device_id + "&settings=" + settings + "&key=" + key + "&value=" + value); };
void vkapi::accountSetSilenceMode (std::string device_id, std::string time, std::string chat_id, std::string user_id, std::string sound, std::string token) { request("account.setSilenceMode", "device_id=" + device_id + "&time=" + time + "&chat_id=" + chat_id + "&user_id=" + user_id + "&sound=" + sound + "&token=" + token); };
void vkapi::accountUnbanUser (std::string user_id) { request("account.unbanUser", "user_id=" + user_id); };
void vkapi::accountUnregisterDevice (std::string device_id, std::string sandbox, std::string token) { request("account.unregisterDevice", "device_id=" + device_id + "&sandbox=" + sandbox + "&token=" + token); };
void vkapi::appsGet (std::string app_id, std::string app_ids, std::string platform, std::string extended, std::string return_friends, std::string fields, std::string name_case) { request("apps.get", "app_id=" + app_id + "&app_ids=" + app_ids + "&platform=" + platform + "&extended=" + extended + "&return_friends=" + return_friends + "&fields=" + fields + "&name_case=" + name_case); };
void vkapi::appsDeleteAppRequests () { request("apps.deleteAppRequests"); };
void vkapi::appsGetLeaderboard (std::string type, std::string global, std::string extended) { request("apps.getLeaderboard", "type=" + type + "&global=" + global + "&extended=" + extended); };
void vkapi::appsGetFriendsList (std::string extended, std::string count, std::string offset, std::string type, std::string fields) { request("apps.getFriendsList", "extended=" + extended + "&count=" + count + "&offset=" + offset + "&type=" + type + "&fields=" + fields); };
void vkapi::appsGetCatalog (std::string sort, std::string offset, std::string count, std::string platform, std::string extended, std::string return_friends, std::string fields, std::string name_case, std::string q, std::string genre_id, std::string filter) { request("apps.getCatalog", "sort=" + sort + "&offset=" + offset + "&count=" + count + "&platform=" + platform + "&extended=" + extended + "&return_friends=" + return_friends + "&fields=" + fields + "&name_case=" + name_case + "&q=" + q + "&genre_id=" + genre_id + "&filter=" + filter); };
void vkapi::appsGetScore (std::string user_id) { request("apps.getScore", "user_id=" + user_id); };
void vkapi::appsSendRequest (std::string user_id, std::string text, std::string type, std::string name, std::string key, std::string separate) { request("apps.sendRequest", "user_id=" + user_id + "&text=" + text + "&type=" + type + "&name=" + name + "&key=" + key + "&separate=" + separate); };
void vkapi::audioAddAlbum (std::string group_id, std::string title) { request("audio.addAlbum", "group_id=" + group_id + "&title=" + title); };
void vkapi::audioAdd (std::string audio_id, std::string owner_id, std::string group_id, std::string album_id) { request("audio.add", "audio_id=" + audio_id + "&owner_id=" + owner_id + "&group_id=" + group_id + "&album_id=" + album_id); };
void vkapi::audioDelete (std::string audio_id, std::string owner_id) { request("audio.delete", "audio_id=" + audio_id + "&owner_id=" + owner_id); };
void vkapi::audioDeleteAlbum (std::string group_id, std::string album_id) { request("audio.deleteAlbum", "group_id=" + group_id + "&album_id=" + album_id); };
void vkapi::audioEditAlbum (std::string group_id, std::string album_id, std::string title) { request("audio.editAlbum", "group_id=" + group_id + "&album_id=" + album_id + "&title=" + title); };
void vkapi::audioGet (std::string owner_id, std::string album_id, std::string audio_ids, std::string need_user, std::string offset, std::string count) { request("audio.get", "owner_id=" + owner_id + "&album_id=" + album_id + "&audio_ids=" + audio_ids + "&need_user=" + need_user + "&offset=" + offset + "&count=" + count); };
void vkapi::audioGetBroadcastList (std::string filter, std::string active) { request("audio.getBroadcastList", "filter=" + filter + "&active=" + active); };
void vkapi::audioGetAlbums (std::string owner_id, std::string offset, std::string count) { request("audio.getAlbums", "owner_id=" + owner_id + "&offset=" + offset + "&count=" + count); };
void vkapi::audioEdit (std::string owner_id, std::string audio_id, std::string artist, std::string title, std::string text, std::string genre_id, std::string no_search) { request("audio.edit", "owner_id=" + owner_id + "&audio_id=" + audio_id + "&artist=" + artist + "&title=" + title + "&text=" + text + "&genre_id=" + genre_id + "&no_search=" + no_search); };
void vkapi::audioGetLyrics (std::string lyrics_id) { request("audio.getLyrics", "lyrics_id=" + lyrics_id); };
void vkapi::audioGetById (std::string audios) { request("audio.getById", "audios=" + audios); };
void vkapi::audioGetCount (std::string owner_id) { request("audio.getCount", "owner_id=" + owner_id); };
void vkapi::audioGetPopular (std::string only_eng, std::string genre_id, std::string offset, std::string count) { request("audio.getPopular", "only_eng=" + only_eng + "&genre_id=" + genre_id + "&offset=" + offset + "&count=" + count); };
void vkapi::audioGetRecommendations (std::string target_audio, std::string user_id, std::string offset, std::string count, std::string shuffle) { request("audio.getRecommendations", "target_audio=" + target_audio + "&user_id=" + user_id + "&offset=" + offset + "&count=" + count + "&shuffle=" + shuffle); };
void vkapi::audioGetUploadServer () { request("audio.getUploadServer"); };
void vkapi::audioMoveToAlbum (std::string group_id, std::string album_id, std::string audio_ids) { request("audio.moveToAlbum", "group_id=" + group_id + "&album_id=" + album_id + "&audio_ids=" + audio_ids); };
void vkapi::audioReorder (std::string audio_id, std::string owner_id, std::string before, std::string after) { request("audio.reorder", "audio_id=" + audio_id + "&owner_id=" + owner_id + "&before=" + before + "&after=" + after); };
void vkapi::audioRestore (std::string audio_id, std::string owner_id) { request("audio.restore", "audio_id=" + audio_id + "&owner_id=" + owner_id); };
void vkapi::audioSearch (std::string q, std::string auto_complete, std::string lyrics, std::string performer_only, std::string sort, std::string search_own, std::string offset, std::string count) { request("audio.search", "q=" + q + "&auto_complete=" + auto_complete + "&lyrics=" + lyrics + "&performer_only=" + performer_only + "&sort=" + sort + "&search_own=" + search_own + "&offset=" + offset + "&count=" + count); };
void vkapi::authCheckPhone (std::string phone, std::string client_id, std::string client_secret) { request("auth.checkPhone", "phone=" + phone + "&client_id=" + client_id + "&client_secret=" + client_secret); };
void vkapi::audioSave (std::string server, std::string audio, std::string hash, std::string artist, std::string title) { request("audio.save", "server=" + server + "&audio=" + audio + "&hash=" + hash + "&artist=" + artist + "&title=" + title); };
void vkapi::authRestore (std::string phone) { request("auth.restore", "phone=" + phone); };
void vkapi::boardCloseTopic (std::string group_id, std::string topic_id) { request("board.closeTopic", "group_id=" + group_id + "&topic_id=" + topic_id); };
void vkapi::boardDeleteComment (std::string group_id, std::string topic_id, std::string comment_id) { request("board.deleteComment", "group_id=" + group_id + "&topic_id=" + topic_id + "&comment_id=" + comment_id); };
void vkapi::boardEditTopic (std::string group_id, std::string topic_id, std::string title) { request("board.editTopic", "group_id=" + group_id + "&topic_id=" + topic_id + "&title=" + title); };
void vkapi::boardFixTopic (std::string group_id, std::string topic_id) { request("board.fixTopic", "group_id=" + group_id + "&topic_id=" + topic_id); };
void vkapi::boardGetComments (std::string group_id, std::string topic_id, std::string need_likes, std::string start_comment_id, std::string offset, std::string count, std::string extended, std::string sort) { request("board.getComments", "group_id=" + group_id + "&topic_id=" + topic_id + "&need_likes=" + need_likes + "&start_comment_id=" + start_comment_id + "&offset=" + offset + "&count=" + count + "&extended=" + extended + "&sort=" + sort); };
void vkapi::boardEditComment (std::string group_id, std::string topic_id, std::string comment_id, std::string text, std::string attachments) { request("board.editComment", "group_id=" + group_id + "&topic_id=" + topic_id + "&comment_id=" + comment_id + "&text=" + text + "&attachments=" + attachments); };
void vkapi::authConfirm (std::string client_id, std::string client_secret, std::string phone, std::string code, std::string password, std::string test_mode, std::string intro) { request("auth.confirm", "client_id=" + client_id + "&client_secret=" + client_secret + "&phone=" + phone + "&code=" + code + "&password=" + password + "&test_mode=" + test_mode + "&intro=" + intro); };
void vkapi::boardGetTopics (std::string group_id, std::string topic_ids, std::string order, std::string offset, std::string count, std::string extended, std::string preview, std::string preview_length) { request("board.getTopics", "group_id=" + group_id + "&topic_ids=" + topic_ids + "&order=" + order + "&offset=" + offset + "&count=" + count + "&extended=" + extended + "&preview=" + preview + "&preview_length=" + preview_length); };
void vkapi::boardAddComment (std::string group_id, std::string topic_id, std::string text, std::string attachments, std::string from_group, std::string sticker_id) { request("board.addComment", "group_id=" + group_id + "&topic_id=" + topic_id + "&text=" + text + "&attachments=" + attachments + "&from_group=" + from_group + "&sticker_id=" + sticker_id); };
void vkapi::authSignup (std::string first_name, std::string last_name, std::string client_id, std::string client_secret, std::string phone, std::string password, std::string test_mode, std::string voice, std::string sex, std::string sid) { request("auth.signup", "first_name=" + first_name + "&last_name=" + last_name + "&client_id=" + client_id + "&client_secret=" + client_secret + "&phone=" + phone + "&password=" + password + "&test_mode=" + test_mode + "&voice=" + voice + "&sex=" + sex + "&sid=" + sid); };
void vkapi::audioSetBroadcast (std::string audio, std::string target_ids) { request("audio.setBroadcast", "audio=" + audio + "&target_ids=" + target_ids); };
void vkapi::boardDeleteTopic (std::string group_id, std::string topic_id) { request("board.deleteTopic", "group_id=" + group_id + "&topic_id=" + topic_id); };
void vkapi::boardRestoreComment (std::string group_id, std::string topic_id, std::string comment_id) { request("board.restoreComment", "group_id=" + group_id + "&topic_id=" + topic_id + "&comment_id=" + comment_id); };
void vkapi::boardAddTopic (std::string group_id, std::string title, std::string text, std::string from_group, std::string attachments) { request("board.addTopic", "group_id=" + group_id + "&title=" + title + "&text=" + text + "&from_group=" + from_group + "&attachments=" + attachments); };
void vkapi::boardUnfixTopic (std::string group_id, std::string topic_id) { request("board.unfixTopic", "group_id=" + group_id + "&topic_id=" + topic_id); };
void vkapi::boardOpenTopic (std::string group_id, std::string topic_id) { request("board.openTopic", "group_id=" + group_id + "&topic_id=" + topic_id); };
void vkapi::databaseGetCountries (std::string need_all, std::string code, std::string offset, std::string count) { request("database.getCountries", "need_all=" + need_all + "&code=" + code + "&offset=" + offset + "&count=" + count); };
void vkapi::databaseGetCountriesById (std::string country_ids) { request("database.getCountriesById", "country_ids=" + country_ids); };
void vkapi::databaseGetCities (std::string country_id, std::string region_id, std::string q, std::string need_all, std::string offset, std::string count) { request("database.getCities", "country_id=" + country_id + "&region_id=" + region_id + "&q=" + q + "&need_all=" + need_all + "&offset=" + offset + "&count=" + count); };
void vkapi::databaseGetChairs (std::string faculty_id, std::string offset, std::string count) { request("database.getChairs", "faculty_id=" + faculty_id + "&offset=" + offset + "&count=" + count); };
void vkapi::databaseGetCitiesById (std::string city_ids) { request("database.getCitiesById", "city_ids=" + city_ids); };
void vkapi::databaseGetRegions (std::string country_id, std::string q, std::string offset, std::string count) { request("database.getRegions", "country_id=" + country_id + "&q=" + q + "&offset=" + offset + "&count=" + count); };
void vkapi::databaseGetFaculties (std::string university_id, std::string offset, std::string count) { request("database.getFaculties", "university_id=" + university_id + "&offset=" + offset + "&count=" + count); };
void vkapi::databaseGetSchoolClasses (std::string country_id) { request("database.getSchoolClasses", "country_id=" + country_id); };
void vkapi::databaseGetUniversities (std::string q, std::string country_id, std::string city_id, std::string offset, std::string count) { request("database.getUniversities", "q=" + q + "&country_id=" + country_id + "&city_id=" + city_id + "&offset=" + offset + "&count=" + count); };
void vkapi::databaseGetSchools (std::string q, std::string city_id, std::string offset, std::string count) { request("database.getSchools", "q=" + q + "&city_id=" + city_id + "&offset=" + offset + "&count=" + count); };
void vkapi::docsAdd (std::string owner_id, std::string doc_id, std::string access_key) { request("docs.add", "owner_id=" + owner_id + "&doc_id=" + doc_id + "&access_key=" + access_key); };
void vkapi::docsDelete (std::string owner_id, std::string doc_id) { request("docs.delete", "owner_id=" + owner_id + "&doc_id=" + doc_id); };
void vkapi::docsGetById (std::string docs) { request("docs.getById", "docs=" + docs); };
void vkapi::databaseGetStreetsById (std::string street_ids) { request("database.getStreetsById", "street_ids=" + street_ids); };
void vkapi::docsGet (std::string count, std::string offset, std::string owner_id) { request("docs.get", "count=" + count + "&offset=" + offset + "&owner_id=" + owner_id); };
void vkapi::docsGetUploadServer (std::string group_id) { request("docs.getUploadServer", "group_id=" + group_id); };
void vkapi::docsGetWallUploadServer (std::string group_id) { request("docs.getWallUploadServer", "group_id=" + group_id); };
void vkapi::execute (std::string code) { request("execute", "code=" + code); };
void vkapi::docsSave (std::string file, std::string title, std::string tags) { request("docs.save", "file=" + file + "&title=" + title + "&tags=" + tags); };
void vkapi::faveAddGroup (std::string group_id) { request("fave.addGroup", "group_id=" + group_id); };
void vkapi::faveAddLink (std::string link, std::string text) { request("fave.addLink", "link=" + link + "&text=" + text); };
void vkapi::faveGetLinks (std::string offset, std::string count) { request("fave.getLinks", "offset=" + offset + "&count=" + count); };
void vkapi::faveGetPhotos (std::string offset, std::string count, std::string photo_sizes) { request("fave.getPhotos", "offset=" + offset + "&count=" + count + "&photo_sizes=" + photo_sizes); };
void vkapi::faveGetPosts (std::string offset, std::string count, std::string extended) { request("fave.getPosts", "offset=" + offset + "&count=" + count + "&extended=" + extended); };
void vkapi::faveAddUser (std::string user_id) { request("fave.addUser", "user_id=" + user_id); };
void vkapi::faveGetUsers (std::string offset, std::string count) { request("fave.getUsers", "offset=" + offset + "&count=" + count); };
void vkapi::faveGetVideos (std::string offset, std::string count, std::string extended) { request("fave.getVideos", "offset=" + offset + "&count=" + count + "&extended=" + extended); };
void vkapi::faveRemoveLink (std::string link_id) { request("fave.removeLink", "link_id=" + link_id); };
void vkapi::friendsAddList (std::string name, std::string user_ids) { request("friends.addList", "name=" + name + "&user_ids=" + user_ids); };
void vkapi::faveRemoveGroup (std::string group_id) { request("fave.removeGroup", "group_id=" + group_id); };
void vkapi::friendsAreFriends (std::string user_ids, std::string need_sign) { request("friends.areFriends", "user_ids=" + user_ids + "&need_sign=" + need_sign); };
void vkapi::friendsAdd (std::string user_id, std::string text, std::string follow) { request("friends.add", "user_id=" + user_id + "&text=" + text + "&follow=" + follow); };
void vkapi::friendsDeleteAllRequests () { request("friends.deleteAllRequests"); };
void vkapi::friendsDelete (std::string user_id) { request("friends.delete", "user_id=" + user_id); };
void vkapi::friendsDeleteList (std::string list_id) { request("friends.deleteList", "list_id=" + list_id); };
void vkapi::friendsGet (std::string user_id, std::string order, std::string list_id, std::string count, std::string offset, std::string fields, std::string name_case) { request("friends.get", "user_id=" + user_id + "&order=" + order + "&list_id=" + list_id + "&count=" + count + "&offset=" + offset + "&fields=" + fields + "&name_case=" + name_case); };
void vkapi::friendsEdit (std::string user_id, std::string list_ids) { request("friends.edit", "user_id=" + user_id + "&list_ids=" + list_ids); };
void vkapi::friendsEditList (std::string name, std::string list_id, std::string user_ids, std::string add_user_ids, std::string delete_user_ids) { request("friends.editList", "name=" + name + "&list_id=" + list_id + "&user_ids=" + user_ids + "&add_user_ids=" + add_user_ids + "&delete_user_ids=" + delete_user_ids); };
void vkapi::friendsGetAppUsers () { request("friends.getAppUsers"); };
void vkapi::friendsGetByPhones (std::string phones, std::string fields) { request("friends.getByPhones", "phones=" + phones + "&fields=" + fields); };
void vkapi::friendsGetLists (std::string user_id, std::string return_system) { request("friends.getLists", "user_id=" + user_id + "&return_system=" + return_system); };
void vkapi::friendsGetAvailableForCall (std::string fields, std::string name_case) { request("friends.getAvailableForCall", "fields=" + fields + "&name_case=" + name_case); };
void vkapi::friendsGetMutual (std::string source_uid, std::string target_uid, std::string target_uids, std::string order, std::string count, std::string offset) { request("friends.getMutual", "source_uid=" + source_uid + "&target_uid=" + target_uid + "&target_uids=" + target_uids + "&order=" + order + "&count=" + count + "&offset=" + offset); };
void vkapi::friendsGetOnline (std::string user_id, std::string list_id, std::string online_mobile, std::string order, std::string count, std::string offset) { request("friends.getOnline", "user_id=" + user_id + "&list_id=" + list_id + "&online_mobile=" + online_mobile + "&order=" + order + "&count=" + count + "&offset=" + offset); };
void vkapi::friendsGetRecent (std::string count) { request("friends.getRecent", "count=" + count); };
void vkapi::friendsGetSuggestions (std::string filter, std::string count, std::string offset, std::string fields, std::string name_case) { request("friends.getSuggestions", "filter=" + filter + "&count=" + count + "&offset=" + offset + "&fields=" + fields + "&name_case=" + name_case); };
void vkapi::friendsGetRequests (std::string offset, std::string count, std::string extended, std::string need_mutual, std::string out, std::string sort, std::string suggested) { request("friends.getRequests", "offset=" + offset + "&count=" + count + "&extended=" + extended + "&need_mutual=" + need_mutual + "&out=" + out + "&sort=" + sort + "&suggested=" + suggested); };
void vkapi::friendsSearch (std::string user_id, std::string q, std::string fields, std::string name_case, std::string offset, std::string count) { request("friends.search", "user_id=" + user_id + "&q=" + q + "&fields=" + fields + "&name_case=" + name_case + "&offset=" + offset + "&count=" + count); };
void vkapi::giftsGet (std::string user_id, std::string count, std::string offset) { request("gifts.get", "user_id=" + user_id + "&count=" + count + "&offset=" + offset); };
void vkapi::groupsAddLink (std::string group_id, std::string link, std::string text) { request("groups.addLink", "group_id=" + group_id + "&link=" + link + "&text=" + text); };
void vkapi::groupsApproveRequest (std::string group_id, std::string user_id) { request("groups.approveRequest", "group_id=" + group_id + "&user_id=" + user_id); };
void vkapi::groupsBanUser (std::string group_id, std::string user_id, std::string end_date, std::string reason, std::string comment, std::string comment_visible) { request("groups.banUser", "group_id=" + group_id + "&user_id=" + user_id + "&end_date=" + end_date + "&reason=" + reason + "&comment=" + comment + "&comment_visible=" + comment_visible); };
void vkapi::groupsCreate (std::string title, std::string description, std::string type, std::string subtype) { request("groups.create", "title=" + title + "&description=" + description + "&type=" + type + "&subtype=" + subtype); };
void vkapi::groupsEdit (std::string group_id, std::string title, std::string description, std::string screen_name, std::string access, std::string website, std::string subject, std::string email, std::string phone, std::string rss, std::string event_start_date, std::string event_finish_date, std::string event_group_id, std::string public_category, std::string public_subcategory, std::string public_date, std::string wall, std::string topics, std::string photos, std::string video, std::string audio, std::string links, std::string events, std::string places, std::string contacts, std::string docs, std::string wiki) { request("groups.edit", "group_id=" + group_id + "&title=" + title + "&description=" + description + "&screen_name=" + screen_name + "&access=" + access + "&website=" + website + "&subject=" + subject + "&email=" + email + "&phone=" + phone + "&rss=" + rss + "&event_start_date=" + event_start_date + "&event_finish_date=" + event_finish_date + "&event_group_id=" + event_group_id + "&public_category=" + public_category + "&public_subcategory=" + public_subcategory + "&public_date=" + public_date + "&wall=" + wall + "&topics=" + topics + "&photos=" + photos + "&video=" + video + "&audio=" + audio + "&links=" + links + "&events=" + events + "&places=" + places + "&contacts=" + contacts + "&docs=" + docs + "&wiki=" + wiki); };
void vkapi::groupsDeleteLink (std::string group_id, std::string link_id) { request("groups.deleteLink", "group_id=" + group_id + "&link_id=" + link_id); };
void vkapi::groupsEditLink (std::string group_id, std::string link_id, std::string text) { request("groups.editLink", "group_id=" + group_id + "&link_id=" + link_id + "&text=" + text); };
void vkapi::groupsEditManager (std::string group_id, std::string user_id, std::string role, std::string is_contact, std::string contact_position, std::string contact_phone, std::string contact_email) { request("groups.editManager", "group_id=" + group_id + "&user_id=" + user_id + "&role=" + role + "&is_contact=" + is_contact + "&contact_position=" + contact_position + "&contact_phone=" + contact_phone + "&contact_email=" + contact_email); };
void vkapi::groupsEditPlace (std::string group_id, std::string title, std::string address, std::string country_id, std::string city_id, std::string latitude, std::string longitude) { request("groups.editPlace", "group_id=" + group_id + "&title=" + title + "&address=" + address + "&country_id=" + country_id + "&city_id=" + city_id + "&latitude=" + latitude + "&longitude=" + longitude); };
void vkapi::groupsGetBanned (std::string group_id, std::string offset, std::string count, std::string fields, std::string user_id) { request("groups.getBanned", "group_id=" + group_id + "&offset=" + offset + "&count=" + count + "&fields=" + fields + "&user_id=" + user_id); };
void vkapi::groupsGet (std::string user_id, std::string extended, std::string filter, std::string fields, std::string offset, std::string count) { request("groups.get", "user_id=" + user_id + "&extended=" + extended + "&filter=" + filter + "&fields=" + fields + "&offset=" + offset + "&count=" + count); };
void vkapi::groupsGetInvites (std::string offset, std::string count, std::string extended) { request("groups.getInvites", "offset=" + offset + "&count=" + count + "&extended=" + extended); };
void vkapi::groupsGetInvitedUsers (std::string group_id, std::string offset, std::string count, std::string fields, std::string name_case) { request("groups.getInvitedUsers", "group_id=" + group_id + "&offset=" + offset + "&count=" + count + "&fields=" + fields + "&name_case=" + name_case); };
void vkapi::groupsGetById (std::string group_ids, std::string group_id, std::string fields) { request("groups.getById", "group_ids=" + group_ids + "&group_id=" + group_id + "&fields=" + fields); };
void vkapi::groupsGetMembers (std::string group_id, std::string sort, std::string offset, std::string count, std::string fields, std::string filter) { request("groups.getMembers", "group_id=" + group_id + "&sort=" + sort + "&offset=" + offset + "&count=" + count + "&fields=" + fields + "&filter=" + filter); };
void vkapi::groupsGetRequests (std::string group_id, std::string offset, std::string count, std::string fields) { request("groups.getRequests", "group_id=" + group_id + "&offset=" + offset + "&count=" + count + "&fields=" + fields); };
void vkapi::groupsGetSettings (std::string group_id) { request("groups.getSettings", "group_id=" + group_id); };
void vkapi::groupsInvite (std::string group_id, std::string user_id) { request("groups.invite", "group_id=" + group_id + "&user_id=" + user_id); };
void vkapi::groupsIsMember (std::string group_id, std::string user_id, std::string user_ids, std::string extended) { request("groups.isMember", "group_id=" + group_id + "&user_id=" + user_id + "&user_ids=" + user_ids + "&extended=" + extended); };
void vkapi::groupsJoin (std::string group_id, std::string not_sure) { request("groups.join", "group_id=" + group_id + "&not_sure=" + not_sure); };
void vkapi::groupsLeave (std::string group_id) { request("groups.leave", "group_id=" + group_id); };
void vkapi::groupsRemoveUser (std::string group_id, std::string user_id) { request("groups.removeUser", "group_id=" + group_id + "&user_id=" + user_id); };
void vkapi::groupsReorderLink (std::string group_id, std::string link_id, std::string after) { request("groups.reorderLink", "group_id=" + group_id + "&link_id=" + link_id + "&after=" + after); };
void vkapi::groupsSearch (std::string q, std::string type, std::string country_id, std::string city_id, std::string future, std::string sort, std::string offset, std::string count) { request("groups.search", "q=" + q + "&type=" + type + "&country_id=" + country_id + "&city_id=" + city_id + "&future=" + future + "&sort=" + sort + "&offset=" + offset + "&count=" + count); };
void vkapi::groupsUnbanUser (std::string group_id, std::string user_id) { request("groups.unbanUser", "group_id=" + group_id + "&user_id=" + user_id); };
void vkapi::likesAdd (std::string type, std::string owner_id, std::string item_id, std::string access_key, std::string ref) { request("likes.add", "type=" + type + "&owner_id=" + owner_id + "&item_id=" + item_id + "&access_key=" + access_key + "&ref=" + ref); };
void vkapi::likesDelete (std::string type, std::string owner_id, std::string item_id) { request("likes.delete", "type=" + type + "&owner_id=" + owner_id + "&item_id=" + item_id); };
void vkapi::messagesCreateChat (std::string user_ids, std::string title) { request("messages.createChat", "user_ids=" + user_ids + "&title=" + title); };
void vkapi::messagesAddChatUser (std::string chat_id, std::string user_id) { request("messages.addChatUser", "chat_id=" + chat_id + "&user_id=" + user_id); };
void vkapi::likesGetList (std::string type, std::string owner_id, std::string item_id, std::string page_url, std::string filter, std::string friends_only, std::string extended, std::string offset, std::string count, std::string skip_own) { request("likes.getList", "type=" + type + "&owner_id=" + owner_id + "&item_id=" + item_id + "&page_url=" + page_url + "&filter=" + filter + "&friends_only=" + friends_only + "&extended=" + extended + "&offset=" + offset + "&count=" + count + "&skip_own=" + skip_own); };
void vkapi::likesIsLiked (std::string user_id, std::string type, std::string owner_id, std::string item_id) { request("likes.isLiked", "user_id=" + user_id + "&type=" + type + "&owner_id=" + owner_id + "&item_id=" + item_id); };
void vkapi::messagesDeleteChatPhoto (std::string chat_id) { request("messages.deleteChatPhoto", "chat_id=" + chat_id); };
void vkapi::messagesDelete (std::string message_ids) { request("messages.delete", "message_ids=" + message_ids); };
void vkapi::messagesDeleteDialog (std::string user_id, std::string peer_id, std::string offset, std::string count) { request("messages.deleteDialog", "user_id=" + user_id + "&peer_id=" + peer_id + "&offset=" + offset + "&count=" + count); };
void vkapi::messagesEditChat (std::string chat_id, std::string title) { request("messages.editChat", "chat_id=" + chat_id + "&title=" + title); };
void vkapi::messagesGet (std::string out, std::string offset, std::string count, std::string time_offset, std::string filters, std::string preview_length, std::string last_message_id) { request("messages.get", "out=" + out + "&offset=" + offset + "&count=" + count + "&time_offset=" + time_offset + "&filters=" + filters + "&preview_length=" + preview_length + "&last_message_id=" + last_message_id); };
void vkapi::messagesGetById (std::string message_ids, std::string preview_length) { request("messages.getById", "message_ids=" + message_ids + "&preview_length=" + preview_length); };
void vkapi::messagesGetChat (std::string chat_id, std::string chat_ids, std::string fields, std::string name_case) { request("messages.getChat", "chat_id=" + chat_id + "&chat_ids=" + chat_ids + "&fields=" + fields + "&name_case=" + name_case); };
void vkapi::messagesGetChatUsers (std::string chat_id, std::string chat_ids, std::string fields, std::string name_case) { request("messages.getChatUsers", "chat_id=" + chat_id + "&chat_ids=" + chat_ids + "&fields=" + fields + "&name_case=" + name_case); };
void vkapi::messagesGetDialogs (std::string offset, std::string count, std::string start_message_id, std::string preview_length, std::string unread, std::string user_id) { request("messages.getDialogs", "offset=" + offset + "&count=" + count + "&start_message_id=" + start_message_id + "&preview_length=" + preview_length + "&unread=" + unread + "&user_id=" + user_id); };
void vkapi::messagesGetHistory (std::string offset, std::string count, std::string user_id, std::string chat_id, std::string peer_id, std::string start_message_id, std::string rev) { request("messages.getHistory", "offset=" + offset + "&count=" + count + "&user_id=" + user_id + "&chat_id=" + chat_id + "&peer_id=" + peer_id + "&start_message_id=" + start_message_id + "&rev=" + rev); };
void vkapi::messagesGetLastActivity (std::string user_id) { request("messages.getLastActivity", "user_id=" + user_id); };
void vkapi::messagesGetLongPollHistory (std::string ts, std::string pts, std::string preview_length, std::string onlines, std::string fields, std::string events_limit, std::string msgs_limit, std::string max_msg_id) { request("messages.getLongPollHistory", "ts=" + ts + "&pts=" + pts + "&preview_length=" + preview_length + "&onlines=" + onlines + "&fields=" + fields + "&events_limit=" + events_limit + "&msgs_limit=" + msgs_limit + "&max_msg_id=" + max_msg_id); };
void vkapi::messagesGetLongPollServer (std::string use_ssl, std::string need_pts) { request("messages.getLongPollServer", "use_ssl=" + use_ssl + "&need_pts=" + need_pts); };
void vkapi::messagesMarkAsImportant (std::string message_ids, std::string important) { request("messages.markAsImportant", "message_ids=" + message_ids + "&important=" + important); };
void vkapi::messagesMarkAsRead (std::string message_ids, std::string peer_id, std::string start_message_id) { request("messages.markAsRead", "message_ids=" + message_ids + "&peer_id=" + peer_id + "&start_message_id=" + start_message_id); };
void vkapi::messagesRemoveChatUser (std::string chat_id, std::string user_id) { request("messages.removeChatUser", "chat_id=" + chat_id + "&user_id=" + user_id); };
void vkapi::messagesRestore (std::string message_id) { request("messages.restore", "message_id=" + message_id); };
void vkapi::messagesSearch (std::string q, std::string preview_length, std::string offset, std::string count) { request("messages.search", "q=" + q + "&preview_length=" + preview_length + "&offset=" + offset + "&count=" + count); };
void vkapi::messagesSetActivity (std::string user_id, std::string type, std::string peer_id) { request("messages.setActivity", "user_id=" + user_id + "&type=" + type + "&peer_id=" + peer_id); };
void vkapi::newsfeedDeleteBan (std::string user_ids, std::string group_ids) { request("newsfeed.deleteBan", "user_ids=" + user_ids + "&group_ids=" + group_ids); };
void vkapi::messagesSend (std::string user_id, std::string peer_id, std::string domain, std::string chat_id, std::string user_ids, std::string message, std::string guid, std::string lat, std::string long, std::string attachment, std::string forward_messages, std::string sticker_id) { request("messages.send", "user_id=" + user_id + "&peer_id=" + peer_id + "&domain=" + domain + "&chat_id=" + chat_id + "&user_ids=" + user_ids + "&message=" + message + "&guid=" + guid + "&lat=" + lat + "&long=" + long + "&attachment=" + attachment + "&forward_messages=" + forward_messages + "&sticker_id=" + sticker_id); };
void vkapi::messagesSetChatPhoto (std::string file) { request("messages.setChatPhoto", "file=" + file); };
void vkapi::messagesSearchDialogs (std::string q, std::string limit, std::string fields) { request("messages.searchDialogs", "q=" + q + "&limit=" + limit + "&fields=" + fields); };
void vkapi::newsfeedDeleteList (std::string list_id) { request("newsfeed.deleteList", "list_id=" + list_id); };
void vkapi::newsfeedGet (std::string filters, std::string return_banned, std::string start_time, std::string end_time, std::string max_photos, std::string source_ids, std::string start_from, std::string count, std::string fields, std::string from, std::string offset) { request("newsfeed.get", "filters=" + filters + "&return_banned=" + return_banned + "&start_time=" + start_time + "&end_time=" + end_time + "&max_photos=" + max_photos + "&source_ids=" + source_ids + "&start_from=" + start_from + "&count=" + count + "&fields=" + fields + "&from=" + from + "&offset=" + offset); };
void vkapi::newsfeedGetBanned (std::string extended, std::string fields, std::string name_case) { request("newsfeed.getBanned", "extended=" + extended + "&fields=" + fields + "&name_case=" + name_case); };
void vkapi::newsfeedGetComments (std::string count, std::string filters, std::string reposts, std::string start_time, std::string end_time, std::string last_comments_count, std::string start_from, std::string fields, std::string from, std::string last_comments) { request("newsfeed.getComments", "count=" + count + "&filters=" + filters + "&reposts=" + reposts + "&start_time=" + start_time + "&end_time=" + end_time + "&last_comments_count=" + last_comments_count + "&start_from=" + start_from + "&fields=" + fields + "&from=" + from + "&last_comments=" + last_comments); };
void vkapi::newsfeedGetLists (std::string list_ids, std::string extended) { request("newsfeed.getLists", "list_ids=" + list_ids + "&extended=" + extended); };
void vkapi::newsfeedGetMentions (std::string owner_id, std::string start_time, std::string end_time, std::string offset, std::string count) { request("newsfeed.getMentions", "owner_id=" + owner_id + "&start_time=" + start_time + "&end_time=" + end_time + "&offset=" + offset + "&count=" + count); };
void vkapi::newsfeedIgnoreItem (std::string type, std::string owner_id, std::string item_id) { request("newsfeed.ignoreItem", "type=" + type + "&owner_id=" + owner_id + "&item_id=" + item_id); };
void vkapi::newsfeedGetSuggestedSources (std::string offset, std::string count, std::string shuffle, std::string fields) { request("newsfeed.getSuggestedSources", "offset=" + offset + "&count=" + count + "&shuffle=" + shuffle + "&fields=" + fields); };
void vkapi::newsfeedGetRecommended (std::string start_time, std::string end_time, std::string max_photos, std::string start_from, std::string count, std::string fields, std::string from, std::string offset) { request("newsfeed.getRecommended", "start_time=" + start_time + "&end_time=" + end_time + "&max_photos=" + max_photos + "&start_from=" + start_from + "&count=" + count + "&fields=" + fields + "&from=" + from + "&offset=" + offset); };
void vkapi::newsfeedSaveList (std::string list_id, std::string title, std::string source_ids, std::string no_reposts) { request("newsfeed.saveList", "list_id=" + list_id + "&title=" + title + "&source_ids=" + source_ids + "&no_reposts=" + no_reposts); };
void vkapi::newsfeedSearch (std::string q, std::string extended, std::string count, std::string latitude, std::string longitude, std::string start_time, std::string end_time, std::string start_from, std::string fields, std::string start_id, std::string offset) { request("newsfeed.search", "q=" + q + "&extended=" + extended + "&count=" + count + "&latitude=" + latitude + "&longitude=" + longitude + "&start_time=" + start_time + "&end_time=" + end_time + "&start_from=" + start_from + "&fields=" + fields + "&start_id=" + start_id + "&offset=" + offset); };
void vkapi::newsfeedUnignoreItem (std::string type, std::string owner_id, std::string item_id) { request("newsfeed.unignoreItem", "type=" + type + "&owner_id=" + owner_id + "&item_id=" + item_id); };
void vkapi::newsfeedUnsubscribe (std::string type, std::string owner_id, std::string item_id) { request("newsfeed.unsubscribe", "type=" + type + "&owner_id=" + owner_id + "&item_id=" + item_id); };
void vkapi::notesAdd (std::string title, std::string text, std::string privacy_view, std::string privacy_comment, std::string privacy, std::string comment_privacy) { request("notes.add", "title=" + title + "&text=" + text + "&privacy_view=" + privacy_view + "&privacy_comment=" + privacy_comment + "&privacy=" + privacy + "&comment_privacy=" + comment_privacy); };
void vkapi::notesCreateComment (std::string note_id, std::string owner_id, std::string reply_to, std::string message) { request("notes.createComment", "note_id=" + note_id + "&owner_id=" + owner_id + "&reply_to=" + reply_to + "&message=" + message); };
void vkapi::notesDelete (std::string note_id) { request("notes.delete", "note_id=" + note_id); };
void vkapi::notesEdit (std::string note_id, std::string title, std::string text, std::string privacy_view, std::string privacy_comment, std::string privacy, std::string comment_privacy) { request("notes.edit", "note_id=" + note_id + "&title=" + title + "&text=" + text + "&privacy_view=" + privacy_view + "&privacy_comment=" + privacy_comment + "&privacy=" + privacy + "&comment_privacy=" + comment_privacy); };
void vkapi::notesDeleteComment (std::string comment_id, std::string owner_id) { request("notes.deleteComment", "comment_id=" + comment_id + "&owner_id=" + owner_id); };
void vkapi::notesEditComment (std::string comment_id, std::string owner_id, std::string message) { request("notes.editComment", "comment_id=" + comment_id + "&owner_id=" + owner_id + "&message=" + message); };
void vkapi::notesGet (std::string note_ids, std::string user_id, std::string offset, std::string count, std::string sort) { request("notes.get", "note_ids=" + note_ids + "&user_id=" + user_id + "&offset=" + offset + "&count=" + count + "&sort=" + sort); };
void vkapi::notesGetById (std::string note_id, std::string owner_id, std::string need_wiki) { request("notes.getById", "note_id=" + note_id + "&owner_id=" + owner_id + "&need_wiki=" + need_wiki); };
void vkapi::notesGetComments (std::string note_id, std::string owner_id, std::string sort, std::string offset, std::string count) { request("notes.getComments", "note_id=" + note_id + "&owner_id=" + owner_id + "&sort=" + sort + "&offset=" + offset + "&count=" + count); };
void vkapi::notesRestoreComment (std::string comment_id, std::string owner_id) { request("notes.restoreComment", "comment_id=" + comment_id + "&owner_id=" + owner_id); };
void vkapi::notesGetFriendsNotes (std::string offset, std::string count) { request("notes.getFriendsNotes", "offset=" + offset + "&count=" + count); };
void vkapi::notificationsGet (std::string count, std::string start_from, std::string filters, std::string start_time, std::string end_time, std::string from, std::string offset) { request("notifications.get", "count=" + count + "&start_from=" + start_from + "&filters=" + filters + "&start_time=" + start_time + "&end_time=" + end_time + "&from=" + from + "&offset=" + offset); };
void vkapi::notificationsMarkAsViewed () { request("notifications.markAsViewed"); };
void vkapi::pagesGet (std::string owner_id, std::string page_id, std::string global, std::string site_preview, std::string title, std::string need_source, std::string need_html) { request("pages.get", "owner_id=" + owner_id + "&page_id=" + page_id + "&global=" + global + "&site_preview=" + site_preview + "&title=" + title + "&need_source=" + need_source + "&need_html=" + need_html); };
void vkapi::pagesClearCache (std::string url) { request("pages.clearCache", "url=" + url); };
void vkapi::pagesGetHistory (std::string page_id, std::string group_id, std::string user_id) { request("pages.getHistory", "page_id=" + page_id + "&group_id=" + group_id + "&user_id=" + user_id); };
void vkapi::pagesGetVersion (std::string version_id, std::string group_id, std::string user_id, std::string need_html) { request("pages.getVersion", "version_id=" + version_id + "&group_id=" + group_id + "&user_id=" + user_id + "&need_html=" + need_html); };
void vkapi::pagesGetTitles (std::string group_id) { request("pages.getTitles", "group_id=" + group_id); };
void vkapi::pagesParseWiki (std::string text, std::string group_id) { request("pages.parseWiki", "text=" + text + "&group_id=" + group_id); };
void vkapi::pagesSave (std::string text, std::string page_id, std::string group_id, std::string user_id, std::string title) { request("pages.save", "text=" + text + "&page_id=" + page_id + "&group_id=" + group_id + "&user_id=" + user_id + "&title=" + title); };
void vkapi::pagesSaveAccess (std::string page_id, std::string group_id, std::string user_id, std::string view, std::string edit) { request("pages.saveAccess", "page_id=" + page_id + "&group_id=" + group_id + "&user_id=" + user_id + "&view=" + view + "&edit=" + edit); };
void vkapi::photosConfirmTag (std::string owner_id, std::string photo_id, std::string tag_id) { request("photos.confirmTag", "owner_id=" + owner_id + "&photo_id=" + photo_id + "&tag_id=" + tag_id); };
void vkapi::photosCopy (std::string owner_id, std::string photo_id, std::string access_key) { request("photos.copy", "owner_id=" + owner_id + "&photo_id=" + photo_id + "&access_key=" + access_key); };
void vkapi::photosCreateAlbum (std::string title, std::string group_id, std::string description, std::string privacy_view, std::string privacy_comment, std::string upload_by_admins_only, std::string comments_disabled, std::string privacy, std::string comment_privacy) { request("photos.createAlbum", "title=" + title + "&group_id=" + group_id + "&description=" + description + "&privacy_view=" + privacy_view + "&privacy_comment=" + privacy_comment + "&upload_by_admins_only=" + upload_by_admins_only + "&comments_disabled=" + comments_disabled + "&privacy=" + privacy + "&comment_privacy=" + comment_privacy); };
void vkapi::photosCreateComment (std::string owner_id, std::string photo_id, std::string message, std::string attachments, std::string from_group, std::string reply_to_comment, std::string sticker_id, std::string access_key, std::string guid) { request("photos.createComment", "owner_id=" + owner_id + "&photo_id=" + photo_id + "&message=" + message + "&attachments=" + attachments + "&from_group=" + from_group + "&reply_to_comment=" + reply_to_comment + "&sticker_id=" + sticker_id + "&access_key=" + access_key + "&guid=" + guid); };
void vkapi::photosDeleteAlbum (std::string album_id, std::string group_id) { request("photos.deleteAlbum", "album_id=" + album_id + "&group_id=" + group_id); };
void vkapi::photosDelete (std::string owner_id, std::string photo_id) { request("photos.delete", "owner_id=" + owner_id + "&photo_id=" + photo_id); };
void vkapi::photosDeleteComment (std::string owner_id, std::string comment_id) { request("photos.deleteComment", "owner_id=" + owner_id + "&comment_id=" + comment_id); };
void vkapi::photosEdit (std::string owner_id, std::string photo_id, std::string caption, std::string latitude, std::string longitude, std::string place_str, std::string foursquare_id, std::string delete_place) { request("photos.edit", "owner_id=" + owner_id + "&photo_id=" + photo_id + "&caption=" + caption + "&latitude=" + latitude + "&longitude=" + longitude + "&place_str=" + place_str + "&foursquare_id=" + foursquare_id + "&delete_place=" + delete_place); };
void vkapi::photosEditComment (std::string owner_id, std::string comment_id, std::string message, std::string attachments) { request("photos.editComment", "owner_id=" + owner_id + "&comment_id=" + comment_id + "&message=" + message + "&attachments=" + attachments); };
void vkapi::photosEditAlbum (std::string album_id, std::string title, std::string description, std::string owner_id, std::string privacy_view, std::string privacy_comment, std::string upload_by_admins_only, std::string comments_disabled, std::string privacy, std::string comment_privacy) { request("photos.editAlbum", "album_id=" + album_id + "&title=" + title + "&description=" + description + "&owner_id=" + owner_id + "&privacy_view=" + privacy_view + "&privacy_comment=" + privacy_comment + "&upload_by_admins_only=" + upload_by_admins_only + "&comments_disabled=" + comments_disabled + "&privacy=" + privacy + "&comment_privacy=" + comment_privacy); };
void vkapi::photosGet (std::string owner_id, std::string album_id, std::string photo_ids, std::string rev, std::string extended, std::string feed_type, std::string feed, std::string photo_sizes, std::string offset, std::string count) { request("photos.get", "owner_id=" + owner_id + "&album_id=" + album_id + "&photo_ids=" + photo_ids + "&rev=" + rev + "&extended=" + extended + "&feed_type=" + feed_type + "&feed=" + feed + "&photo_sizes=" + photo_sizes + "&offset=" + offset + "&count=" + count); };
void vkapi::photosGetAlbums (std::string owner_id, std::string album_ids, std::string offset, std::string count, std::string need_system, std::string need_covers, std::string photo_sizes) { request("photos.getAlbums", "owner_id=" + owner_id + "&album_ids=" + album_ids + "&offset=" + offset + "&count=" + count + "&need_system=" + need_system + "&need_covers=" + need_covers + "&photo_sizes=" + photo_sizes); };
void vkapi::photosGetAlbumsCount (std::string user_id, std::string group_id) { request("photos.getAlbumsCount", "user_id=" + user_id + "&group_id=" + group_id); };
void vkapi::photosGetAll (std::string owner_id, std::string extended, std::string offset, std::string count, std::string photo_sizes, std::string no_service_albums, std::string need_hidden, std::string skip_hidden) { request("photos.getAll", "owner_id=" + owner_id + "&extended=" + extended + "&offset=" + offset + "&count=" + count + "&photo_sizes=" + photo_sizes + "&no_service_albums=" + no_service_albums + "&need_hidden=" + need_hidden + "&skip_hidden=" + skip_hidden); };
void vkapi::photosGetAllComments (std::string owner_id, std::string album_id, std::string need_likes, std::string offset, std::string count) { request("photos.getAllComments", "owner_id=" + owner_id + "&album_id=" + album_id + "&need_likes=" + need_likes + "&offset=" + offset + "&count=" + count); };
void vkapi::photosGetById (std::string photos, std::string extended, std::string photo_sizes) { request("photos.getById", "photos=" + photos + "&extended=" + extended + "&photo_sizes=" + photo_sizes); };
void vkapi::photosGetChatUploadServer (std::string chat_id, std::string crop_x, std::string crop_y, std::string crop_width) { request("photos.getChatUploadServer", "chat_id=" + chat_id + "&crop_x=" + crop_x + "&crop_y=" + crop_y + "&crop_width=" + crop_width); };
void vkapi::photosGetComments (std::string owner_id, std::string photo_id, std::string need_likes, std::string start_comment_id, std::string offset, std::string count, std::string sort, std::string access_key, std::string extended, std::string fields, std::string skip_before_id, std::string skip_after_id) { request("photos.getComments", "owner_id=" + owner_id + "&photo_id=" + photo_id + "&need_likes=" + need_likes + "&start_comment_id=" + start_comment_id + "&offset=" + offset + "&count=" + count + "&sort=" + sort + "&access_key=" + access_key + "&extended=" + extended + "&fields=" + fields + "&skip_before_id=" + skip_before_id + "&skip_after_id=" + skip_after_id); };
void vkapi::photosGetNewTags (std::string offset, std::string count) { request("photos.getNewTags", "offset=" + offset + "&count=" + count); };
void vkapi::photosGetMessagesUploadServer () { request("photos.getMessagesUploadServer"); };
void vkapi::photosGetOwnerPhotoUploadServer (std::string owner_id) { request("photos.getOwnerPhotoUploadServer", "owner_id=" + owner_id); };
void vkapi::photosGetTags (std::string owner_id, std::string photo_id, std::string access_key) { request("photos.getTags", "owner_id=" + owner_id + "&photo_id=" + photo_id + "&access_key=" + access_key); };
void vkapi::photosGetUploadServer (std::string album_id, std::string group_id) { request("photos.getUploadServer", "album_id=" + album_id + "&group_id=" + group_id); };
void vkapi::photosGetWallUploadServer (std::string group_id) { request("photos.getWallUploadServer", "group_id=" + group_id); };
void vkapi::photosGetUserPhotos (std::string user_id, std::string offset, std::string count, std::string extended, std::string sort) { request("photos.getUserPhotos", "user_id=" + user_id + "&offset=" + offset + "&count=" + count + "&extended=" + extended + "&sort=" + sort); };
void vkapi::photosMakeCover (std::string owner_id, std::string photo_id, std::string album_id) { request("photos.makeCover", "owner_id=" + owner_id + "&photo_id=" + photo_id + "&album_id=" + album_id); };
void vkapi::photosMove (std::string owner_id, std::string target_album_id, std::string photo_id) { request("photos.move", "owner_id=" + owner_id + "&target_album_id=" + target_album_id + "&photo_id=" + photo_id); };
void vkapi::photosRemoveTag (std::string owner_id, std::string photo_id, std::string tag_id) { request("photos.removeTag", "owner_id=" + owner_id + "&photo_id=" + photo_id + "&tag_id=" + tag_id); };
void vkapi::photosReorderPhotos (std::string owner_id, std::string photo_id, std::string before, std::string after) { request("photos.reorderPhotos", "owner_id=" + owner_id + "&photo_id=" + photo_id + "&before=" + before + "&after=" + after); };
void vkapi::photosReorderAlbums (std::string owner_id, std::string album_id, std::string before, std::string after) { request("photos.reorderAlbums", "owner_id=" + owner_id + "&album_id=" + album_id + "&before=" + before + "&after=" + after); };
void vkapi::photosPutTag (std::string owner_id, std::string photo_id, std::string user_id, std::string x, std::string y) { request("photos.putTag", "owner_id=" + owner_id + "&photo_id=" + photo_id + "&user_id=" + user_id + "&x=" + x + "&y=" + y); };
void vkapi::photosReport (std::string owner_id, std::string photo_id, std::string reason) { request("photos.report", "owner_id=" + owner_id + "&photo_id=" + photo_id + "&reason=" + reason); };
void vkapi::photosRestore (std::string owner_id, std::string photo_id) { request("photos.restore", "owner_id=" + owner_id + "&photo_id=" + photo_id); };
void vkapi::photosReportComment (std::string owner_id, std::string comment_id, std::string reason) { request("photos.reportComment", "owner_id=" + owner_id + "&comment_id=" + comment_id + "&reason=" + reason); };
void vkapi::photosRestoreComment (std::string owner_id, std::string comment_id) { request("photos.restoreComment", "owner_id=" + owner_id + "&comment_id=" + comment_id); };
void vkapi::photosSave (std::string album_id, std::string group_id, std::string server, std::string photos_list, std::string hash, std::string latitude, std::string longitude, std::string caption) { request("photos.save", "album_id=" + album_id + "&group_id=" + group_id + "&server=" + server + "&photos_list=" + photos_list + "&hash=" + hash + "&latitude=" + latitude + "&longitude=" + longitude + "&caption=" + caption); };
void vkapi::photosSaveMessagesPhoto (std::string photo) { request("photos.saveMessagesPhoto", "photo=" + photo); };
void vkapi::photosSaveOwnerPhoto (std::string server, std::string hash, std::string photo) { request("photos.saveOwnerPhoto", "server=" + server + "&hash=" + hash + "&photo=" + photo); };
void vkapi::photosSaveWallPhoto (std::string user_id, std::string group_id, std::string photo, std::string server, std::string hash) { request("photos.saveWallPhoto", "user_id=" + user_id + "&group_id=" + group_id + "&photo=" + photo + "&server=" + server + "&hash=" + hash); };
void vkapi::placesAdd (std::string type, std::string title, std::string latitude, std::string longitude, std::string country, std::string city, std::string address) { request("places.add", "type=" + type + "&title=" + title + "&latitude=" + latitude + "&longitude=" + longitude + "&country=" + country + "&city=" + city + "&address=" + address); };
void vkapi::photosSearch (std::string q, std::string lat, std::string long, std::string start_time, std::string end_time, std::string sort, std::string offset, std::string count, std::string radius) { request("photos.search", "q=" + q + "&lat=" + lat + "&long=" + long + "&start_time=" + start_time + "&end_time=" + end_time + "&sort=" + sort + "&offset=" + offset + "&count=" + count + "&radius=" + radius); };
void vkapi::placesCheckin (std::string place_id, std::string text, std::string latitude, std::string longitude, std::string friends_only, std::string services) { request("places.checkin", "place_id=" + place_id + "&text=" + text + "&latitude=" + latitude + "&longitude=" + longitude + "&friends_only=" + friends_only + "&services=" + services); };
void vkapi::placesGetById (std::string places) { request("places.getById", "places=" + places); };
void vkapi::placesGetCheckins (std::string latitude, std::string longitude, std::string place, std::string user_id, std::string offset, std::string count, std::string timestamp, std::string friends_only, std::string need_places) { request("places.getCheckins", "latitude=" + latitude + "&longitude=" + longitude + "&place=" + place + "&user_id=" + user_id + "&offset=" + offset + "&count=" + count + "&timestamp=" + timestamp + "&friends_only=" + friends_only + "&need_places=" + need_places); };
void vkapi::placesGetTypes () { request("places.getTypes"); };
void vkapi::placesSearch (std::string q, std::string city, std::string latitude, std::string longitude, std::string radius, std::string offset, std::string count) { request("places.search", "q=" + q + "&city=" + city + "&latitude=" + latitude + "&longitude=" + longitude + "&radius=" + radius + "&offset=" + offset + "&count=" + count); };
void vkapi::pollsAddVote (std::string owner_id, std::string poll_id, std::string answer_id, std::string is_board) { request("polls.addVote", "owner_id=" + owner_id + "&poll_id=" + poll_id + "&answer_id=" + answer_id + "&is_board=" + is_board); };
void vkapi::pollsCreate (std::string question, std::string is_anonymous, std::string owner_id, std::string add_answers) { request("polls.create", "question=" + question + "&is_anonymous=" + is_anonymous + "&owner_id=" + owner_id + "&add_answers=" + add_answers); };
void vkapi::pollsDeleteVote (std::string owner_id, std::string poll_id, std::string answer_id, std::string is_board) { request("polls.deleteVote", "owner_id=" + owner_id + "&poll_id=" + poll_id + "&answer_id=" + answer_id + "&is_board=" + is_board); };
void vkapi::pollsEdit (std::string owner_id, std::string poll_id, std::string question, std::string add_answers, std::string edit_answers, std::string delete_answers) { request("polls.edit", "owner_id=" + owner_id + "&poll_id=" + poll_id + "&question=" + question + "&add_answers=" + add_answers + "&edit_answers=" + edit_answers + "&delete_answers=" + delete_answers); };
void vkapi::pollsGetById (std::string owner_id, std::string is_board, std::string poll_id) { request("polls.getById", "owner_id=" + owner_id + "&is_board=" + is_board + "&poll_id=" + poll_id); };
void vkapi::pollsGetVoters (std::string owner_id, std::string poll_id, std::string answer_ids, std::string is_board, std::string friends_only, std::string offset, std::string count, std::string fields, std::string name_case) { request("polls.getVoters", "owner_id=" + owner_id + "&poll_id=" + poll_id + "&answer_ids=" + answer_ids + "&is_board=" + is_board + "&friends_only=" + friends_only + "&offset=" + offset + "&count=" + count + "&fields=" + fields + "&name_case=" + name_case); };
void vkapi::statsGet (std::string group_id, std::string app_id, std::string date_from, std::string date_to) { request("stats.get", "group_id=" + group_id + "&app_id=" + app_id + "&date_from=" + date_from + "&date_to=" + date_to); };
void vkapi::searchGetHints (std::string q, std::string limit, std::string filters, std::string search_global) { request("search.getHints", "q=" + q + "&limit=" + limit + "&filters=" + filters + "&search_global=" + search_global); };
void vkapi::statsGetPostReach (std::string owner_id, std::string post_id) { request("stats.getPostReach", "owner_id=" + owner_id + "&post_id=" + post_id); };
void vkapi::statusGet (std::string user_id, std::string group_id) { request("status.get", "user_id=" + user_id + "&group_id=" + group_id); };
void vkapi::statsTrackVisitor () { request("stats.trackVisitor"); };
void vkapi::storageGet (std::string key, std::string keys, std::string user_id, std::string global) { request("storage.get", "key=" + key + "&keys=" + keys + "&user_id=" + user_id + "&global=" + global); };
void vkapi::statusSet (std::string text, std::string group_id) { request("status.set", "text=" + text + "&group_id=" + group_id); };
void vkapi::storageGetKeys (std::string user_id, std::string global, std::string offset, std::string count) { request("storage.getKeys", "user_id=" + user_id + "&global=" + global + "&offset=" + offset + "&count=" + count); };
void vkapi::usersGet (std::string user_ids, std::string fields, std::string name_case) { request("users.get", "user_ids=" + user_ids + "&fields=" + fields + "&name_case=" + name_case); };
void vkapi::storageSet (std::string key, std::string value, std::string user_id, std::string global) { request("storage.set", "key=" + key + "&value=" + value + "&user_id=" + user_id + "&global=" + global); };
void vkapi::usersGetNearby (std::string latitude, std::string longitude, std::string accuracy, std::string timeout, std::string radius, std::string fields, std::string name_case) { request("users.getNearby", "latitude=" + latitude + "&longitude=" + longitude + "&accuracy=" + accuracy + "&timeout=" + timeout + "&radius=" + radius + "&fields=" + fields + "&name_case=" + name_case); };
void vkapi::usersGetFollowers (std::string user_id, std::string offset, std::string count, std::string fields, std::string name_case) { request("users.getFollowers", "user_id=" + user_id + "&offset=" + offset + "&count=" + count + "&fields=" + fields + "&name_case=" + name_case); };
void vkapi::usersIsAppUser (std::string user_id) { request("users.isAppUser", "user_id=" + user_id); };
void vkapi::usersReport (std::string user_id, std::string type, std::string comment) { request("users.report", "user_id=" + user_id + "&type=" + type + "&comment=" + comment); };
void vkapi::usersSearch (std::string q, std::string sort, std::string offset, std::string count, std::string fields, std::string city, std::string country, std::string hometown, std::string university_country, std::string university, std::string university_year, std::string university_faculty, std::string university_chair, std::string sex, std::string status, std::string age_from, std::string age_to, std::string birth_day, std::string birth_month, std::string birth_year, std::string online, std::string has_photo, std::string school_country, std::string school_city, std::string school_class, std::string school, std::string school_year, std::string religion, std::string interests, std::string company, std::string position, std::string group_id, std::string from_list) { request("users.search", "q=" + q + "&sort=" + sort + "&offset=" + offset + "&count=" + count + "&fields=" + fields + "&city=" + city + "&country=" + country + "&hometown=" + hometown + "&university_country=" + university_country + "&university=" + university + "&university_year=" + university_year + "&university_faculty=" + university_faculty + "&university_chair=" + university_chair + "&sex=" + sex + "&status=" + status + "&age_from=" + age_from + "&age_to=" + age_to + "&birth_day=" + birth_day + "&birth_month=" + birth_month + "&birth_year=" + birth_year + "&online=" + online + "&has_photo=" + has_photo + "&school_country=" + school_country + "&school_city=" + school_city + "&school_class=" + school_class + "&school=" + school + "&school_year=" + school_year + "&religion=" + religion + "&interests=" + interests + "&company=" + company + "&position=" + position + "&group_id=" + group_id + "&from_list=" + from_list); };
void vkapi::utilsCheckLink (std::string url) { request("utils.checkLink", "url=" + url); };
void vkapi::usersGetSubscriptions (std::string user_id, std::string extended, std::string offset, std::string count, std::string fields) { request("users.getSubscriptions", "user_id=" + user_id + "&extended=" + extended + "&offset=" + offset + "&count=" + count + "&fields=" + fields); };
void vkapi::utilsGetServerTime () { request("utils.getServerTime"); };
void vkapi::utilsResolveScreenName (std::string screen_name) { request("utils.resolveScreenName", "screen_name=" + screen_name); };
void vkapi::videoAdd (std::string target_id, std::string video_id, std::string owner_id) { request("video.add", "target_id=" + target_id + "&video_id=" + video_id + "&owner_id=" + owner_id); };
void vkapi::videoAddAlbum (std::string group_id, std::string title, std::string privacy) { request("video.addAlbum", "group_id=" + group_id + "&title=" + title + "&privacy=" + privacy); };
void vkapi::videoAddToAlbum (std::string target_id, std::string album_id, std::string album_ids, std::string owner_id, std::string video_id) { request("video.addToAlbum", "target_id=" + target_id + "&album_id=" + album_id + "&album_ids=" + album_ids + "&owner_id=" + owner_id + "&video_id=" + video_id); };
void vkapi::videoDelete (std::string video_id, std::string owner_id, std::string target_id) { request("video.delete", "video_id=" + video_id + "&owner_id=" + owner_id + "&target_id=" + target_id); };
void vkapi::videoDeleteAlbum (std::string group_id, std::string album_id) { request("video.deleteAlbum", "group_id=" + group_id + "&album_id=" + album_id); };
void vkapi::videoCreateComment (std::string owner_id, std::string video_id, std::string message, std::string attachments, std::string from_group, std::string reply_to_comment, std::string sticker_id) { request("video.createComment", "owner_id=" + owner_id + "&video_id=" + video_id + "&message=" + message + "&attachments=" + attachments + "&from_group=" + from_group + "&reply_to_comment=" + reply_to_comment + "&sticker_id=" + sticker_id); };
void vkapi::videoDeleteComment (std::string owner_id, std::string comment_id) { request("video.deleteComment", "owner_id=" + owner_id + "&comment_id=" + comment_id); };
void vkapi::videoEditAlbum (std::string group_id, std::string album_id, std::string title, std::string privacy) { request("video.editAlbum", "group_id=" + group_id + "&album_id=" + album_id + "&title=" + title + "&privacy=" + privacy); };
void vkapi::videoEdit (std::string owner_id, std::string video_id, std::string name, std::string desc, std::string privacy_view, std::string privacy_comment, std::string no_comments, std::string repeat) { request("video.edit", "owner_id=" + owner_id + "&video_id=" + video_id + "&name=" + name + "&desc=" + desc + "&privacy_view=" + privacy_view + "&privacy_comment=" + privacy_comment + "&no_comments=" + no_comments + "&repeat=" + repeat); };
void vkapi::videoEditComment (std::string owner_id, std::string comment_id, std::string message, std::string attachments) { request("video.editComment", "owner_id=" + owner_id + "&comment_id=" + comment_id + "&message=" + message + "&attachments=" + attachments); };
void vkapi::videoGetAlbumById (std::string owner_id, std::string album_id) { request("video.getAlbumById", "owner_id=" + owner_id + "&album_id=" + album_id); };
void vkapi::videoGetAlbums (std::string owner_id, std::string offset, std::string count, std::string extended, std::string need_system) { request("video.getAlbums", "owner_id=" + owner_id + "&offset=" + offset + "&count=" + count + "&extended=" + extended + "&need_system=" + need_system); };
void vkapi::videoGetComments (std::string owner_id, std::string video_id, std::string need_likes, std::string start_comment_id, std::string offset, std::string count, std::string sort, std::string extended) { request("video.getComments", "owner_id=" + owner_id + "&video_id=" + video_id + "&need_likes=" + need_likes + "&start_comment_id=" + start_comment_id + "&offset=" + offset + "&count=" + count + "&sort=" + sort + "&extended=" + extended); };
void vkapi::videoGet (std::string owner_id, std::string videos, std::string album_id, std::string count, std::string offset, std::string extended) { request("video.get", "owner_id=" + owner_id + "&videos=" + videos + "&album_id=" + album_id + "&count=" + count + "&offset=" + offset + "&extended=" + extended); };
void vkapi::videoGetAlbumsByVideo (std::string target_id, std::string owner_id, std::string video_id, std::string extended) { request("video.getAlbumsByVideo", "target_id=" + target_id + "&owner_id=" + owner_id + "&video_id=" + video_id + "&extended=" + extended); };
void vkapi::videoGetNewTags (std::string offset, std::string count) { request("video.getNewTags", "offset=" + offset + "&count=" + count); };
void vkapi::videoGetTags (std::string owner_id, std::string video_id) { request("video.getTags", "owner_id=" + owner_id + "&video_id=" + video_id); };
void vkapi::videoGetUserVideos (std::string user_id, std::string offset, std::string count, std::string extended) { request("video.getUserVideos", "user_id=" + user_id + "&offset=" + offset + "&count=" + count + "&extended=" + extended); };
void vkapi::videoPutTag (std::string user_id, std::string owner_id, std::string video_id, std::string tagged_name) { request("video.putTag", "user_id=" + user_id + "&owner_id=" + owner_id + "&video_id=" + video_id + "&tagged_name=" + tagged_name); };
void vkapi::videoRemoveFromAlbum (std::string target_id, std::string album_id, std::string album_ids, std::string owner_id, std::string video_id) { request("video.removeFromAlbum", "target_id=" + target_id + "&album_id=" + album_id + "&album_ids=" + album_ids + "&owner_id=" + owner_id + "&video_id=" + video_id); };
void vkapi::videoRemoveTag (std::string tag_id, std::string owner_id, std::string video_id) { request("video.removeTag", "tag_id=" + tag_id + "&owner_id=" + owner_id + "&video_id=" + video_id); };
void vkapi::videoReorderAlbums (std::string owner_id, std::string album_id, std::string before, std::string after) { request("video.reorderAlbums", "owner_id=" + owner_id + "&album_id=" + album_id + "&before=" + before + "&after=" + after); };
void vkapi::videoReport (std::string owner_id, std::string video_id, std::string reason, std::string comment, std::string search_query) { request("video.report", "owner_id=" + owner_id + "&video_id=" + video_id + "&reason=" + reason + "&comment=" + comment + "&search_query=" + search_query); };
void vkapi::videoRestore (std::string video_id, std::string owner_id) { request("video.restore", "video_id=" + video_id + "&owner_id=" + owner_id); };
void vkapi::videoReportComment (std::string owner_id, std::string comment_id, std::string reason) { request("video.reportComment", "owner_id=" + owner_id + "&comment_id=" + comment_id + "&reason=" + reason); };
void vkapi::videoRestoreComment (std::string owner_id, std::string comment_id) { request("video.restoreComment", "owner_id=" + owner_id + "&comment_id=" + comment_id); };
void vkapi::videoSave (std::string name, std::string description, std::string is_private, std::string wallpost, std::string link, std::string group_id, std::string album_id, std::string privacy_view, std::string privacy_comment, std::string no_comments, std::string repeat) { request("video.save", "name=" + name + "&description=" + description + "&is_private=" + is_private + "&wallpost=" + wallpost + "&link=" + link + "&group_id=" + group_id + "&album_id=" + album_id + "&privacy_view=" + privacy_view + "&privacy_comment=" + privacy_comment + "&no_comments=" + no_comments + "&repeat=" + repeat); };
void vkapi::videoSearch (std::string q, std::string sort, std::string hd, std::string adult, std::string filters, std::string search_own, std::string offset, std::string longer, std::string shorter, std::string count, std::string extended) { request("video.search", "q=" + q + "&sort=" + sort + "&hd=" + hd + "&adult=" + adult + "&filters=" + filters + "&search_own=" + search_own + "&offset=" + offset + "&longer=" + longer + "&shorter=" + shorter + "&count=" + count + "&extended=" + extended); };
void vkapi::wallAddComment (std::string owner_id, std::string post_id, std::string from_group, std::string text, std::string reply_to_comment, std::string attachments, std::string sticker_id, std::string ref) { request("wall.addComment", "owner_id=" + owner_id + "&post_id=" + post_id + "&from_group=" + from_group + "&text=" + text + "&reply_to_comment=" + reply_to_comment + "&attachments=" + attachments + "&sticker_id=" + sticker_id + "&ref=" + ref); };
void vkapi::wallDelete (std::string owner_id, std::string post_id) { request("wall.delete", "owner_id=" + owner_id + "&post_id=" + post_id); };
void vkapi::wallDeleteComment (std::string owner_id, std::string comment_id) { request("wall.deleteComment", "owner_id=" + owner_id + "&comment_id=" + comment_id); };
void vkapi::wallEditComment (std::string owner_id, std::string comment_id, std::string message, std::string attachments) { request("wall.editComment", "owner_id=" + owner_id + "&comment_id=" + comment_id + "&message=" + message + "&attachments=" + attachments); };
void vkapi::wallEdit (std::string owner_id, std::string post_id, std::string friends_only, std::string message, std::string attachments, std::string services, std::string signed, std::string publish_date, std::string lat, std::string long, std::string place_id) { request("wall.edit", "owner_id=" + owner_id + "&post_id=" + post_id + "&friends_only=" + friends_only + "&message=" + message + "&attachments=" + attachments + "&services=" + services + "&signed=" + signed + "&publish_date=" + publish_date + "&lat=" + lat + "&long=" + long + "&place_id=" + place_id); };
void vkapi::wallGet (std::string owner_id, std::string domain, std::string offset, std::string count, std::string filter, std::string extended, std::string fields) { request("wall.get", "owner_id=" + owner_id + "&domain=" + domain + "&offset=" + offset + "&count=" + count + "&filter=" + filter + "&extended=" + extended + "&fields=" + fields); };
void vkapi::wallGetById (std::string posts, std::string extended, std::string copy_history_depth, std::string fields) { request("wall.getById", "posts=" + posts + "&extended=" + extended + "&copy_history_depth=" + copy_history_depth + "&fields=" + fields); };
void vkapi::wallGetComments (std::string owner_id, std::string post_id, std::string need_likes, std::string start_comment_id, std::string offset, std::string count, std::string sort, std::string preview_length, std::string extended) { request("wall.getComments", "owner_id=" + owner_id + "&post_id=" + post_id + "&need_likes=" + need_likes + "&start_comment_id=" + start_comment_id + "&offset=" + offset + "&count=" + count + "&sort=" + sort + "&preview_length=" + preview_length + "&extended=" + extended); };
void vkapi::wallGetReposts (std::string owner_id, std::string post_id, std::string offset, std::string count) { request("wall.getReposts", "owner_id=" + owner_id + "&post_id=" + post_id + "&offset=" + offset + "&count=" + count); };
void vkapi::wallPin (std::string owner_id, std::string post_id) { request("wall.pin", "owner_id=" + owner_id + "&post_id=" + post_id); };
void vkapi::wallReportComment (std::string owner_id, std::string comment_id, std::string reason) { request("wall.reportComment", "owner_id=" + owner_id + "&comment_id=" + comment_id + "&reason=" + reason); };
void vkapi::wallReportPost (std::string owner_id, std::string post_id, std::string reason) { request("wall.reportPost", "owner_id=" + owner_id + "&post_id=" + post_id + "&reason=" + reason); };
void vkapi::wallRepost (std::string object, std::string message, std::string group_id, std::string ref) { request("wall.repost", "object=" + object + "&message=" + message + "&group_id=" + group_id + "&ref=" + ref); };
void vkapi::wallPost (std::string owner_id, std::string friends_only, std::string from_group, std::string message, std::string attachments, std::string services, std::string signed, std::string publish_date, std::string lat, std::string long, std::string place_id, std::string post_id) { request("wall.post", "owner_id=" + owner_id + "&friends_only=" + friends_only + "&from_group=" + from_group + "&message=" + message + "&attachments=" + attachments + "&services=" + services + "&signed=" + signed + "&publish_date=" + publish_date + "&lat=" + lat + "&long=" + long + "&place_id=" + place_id + "&post_id=" + post_id); };
void vkapi::wallRestore (std::string owner_id, std::string post_id) { request("wall.restore", "owner_id=" + owner_id + "&post_id=" + post_id); };
void vkapi::wallSearch (std::string owner_id, std::string domain, std::string query, std::string owners_only, std::string count, std::string offset, std::string extended, std::string fields) { request("wall.search", "owner_id=" + owner_id + "&domain=" + domain + "&query=" + query + "&owners_only=" + owners_only + "&count=" + count + "&offset=" + offset + "&extended=" + extended + "&fields=" + fields); };
void vkapi::wallUnpin (std::string owner_id, std::string post_id) { request("wall.unpin", "owner_id=" + owner_id + "&post_id=" + post_id); };
void vkapi::widgetsGetComments (std::string widget_api_id, std::string url, std::string page_id, std::string order, std::string fields, std::string offset, std::string count) { request("widgets.getComments", "widget_api_id=" + widget_api_id + "&url=" + url + "&page_id=" + page_id + "&order=" + order + "&fields=" + fields + "&offset=" + offset + "&count=" + count); };
void vkapi::wallRestoreComment (std::string owner_id, std::string comment_id) { request("wall.restoreComment", "owner_id=" + owner_id + "&comment_id=" + comment_id); };
void vkapi::widgetsGetPages (std::string widget_api_id, std::string order, std::string period, std::string offset, std::string count) { request("widgets.getPages", "widget_api_id=" + widget_api_id + "&order=" + order + "&period=" + period + "&offset=" + offset + "&count=" + count); };
